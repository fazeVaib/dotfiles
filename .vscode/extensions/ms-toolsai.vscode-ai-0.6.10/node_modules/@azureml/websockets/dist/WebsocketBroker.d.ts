import { IWebsocketSubscription } from "./IWebsocketSubscription";
declare type TrackWebsocketDependency = (messageId: string, messageType: string, websocketUrl: string | undefined, totalTime: number, exception: Error | undefined, properties: {
    [name: string]: string;
}) => void;
export declare class WebsocketBroker {
    private static Connection;
    private static readonly DisconnectMessageId;
    private static IsReconciling;
    private static ReconcileRequests;
    private static readonly RetryIntervals;
    private static SessionId;
    private static readonly State;
    private static SubscribeRetryCount;
    private static SubscribeRetryTimer;
    private static TrackWebsocketDependency;
    private static UpdateConnectedState;
    private static WorkspaceArmId;
    private constructor();
    static initialize(sessionId: string, trackWebsocketDependency: TrackWebsocketDependency, updateConnectedState: (isConnected: boolean) => void): void;
    static setAuthToken(authToken: string): void;
    static setBaseUrl(baseUrl: string): void;
    static setWorkspaceArmId(workspaceArmId: string): void;
    static replaceSubscriptions(before: IWebsocketSubscription[], desired: IWebsocketSubscription[]): void;
    static subscribe(subscriptions: IWebsocketSubscription[]): void;
    static unsubscribe(subscriptions: IWebsocketSubscription[]): void;
    private static subscriptionsContains;
    private static subscriptionEquals;
    private static clearSubscribeTimer;
    private static connect;
    private static getNextRetryInterval;
    private static onClose;
    private static onSend;
    private static onSubscribeComplete;
    private static reconcileState;
    private static resetActualState;
    private static setSubscribeTimer;
    private static stop;
    private static updateMessage;
    private static updateSubscriptions;
}
export {};
