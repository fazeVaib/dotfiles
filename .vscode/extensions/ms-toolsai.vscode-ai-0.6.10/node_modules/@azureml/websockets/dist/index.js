import { HubConnectionBuilder, HubConnectionState } from '@aspnet/signalr';
import { v4 } from 'uuid';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

var SubscribeOperationType;
(function (SubscribeOperationType) {
    SubscribeOperationType[SubscribeOperationType["Subscribe"] = 0] = "Subscribe";
    SubscribeOperationType[SubscribeOperationType["Unsubscribe"] = 1] = "Unsubscribe";
})(SubscribeOperationType || (SubscribeOperationType = {}));

var HubMethods = {
    Send: "Send",
    Subscribe: "Subscribe",
    SubscribeComplete: "SubscribeComplete"
};
// tslint:disable:strict-type-predicates - Justification: window might be undefined in NodeJS environment like VS Code
// tslint:disable:no-typeof-undefined - Justification: this is a bug in tslint https://github.com/microsoft/tslint-microsoft-contrib/issues/415
var setTimeout = (typeof window === "undefined" ? global : window).setTimeout;
var clearTimeout = (typeof window === "undefined" ? global : window).clearTimeout;
// tslint:enable:no-typeof-undefined
// tslint:enable:strict-type-predicates
var WebsocketBroker = /** @class */ (function () {
    function WebsocketBroker() {
    }
    WebsocketBroker.initialize = function (sessionId, trackWebsocketDependency, updateConnectedState) {
        this.SessionId = sessionId;
        this.TrackWebsocketDependency = trackWebsocketDependency;
        this.UpdateConnectedState = updateConnectedState;
        this.onClose = this.onClose.bind(this);
        this.onSend = this.onSend.bind(this);
        this.onSubscribeComplete = this.onSubscribeComplete.bind(this);
    };
    WebsocketBroker.setAuthToken = function (authToken) {
        if (this.State.desiredAuthToken !== authToken) {
            this.State.desiredAuthToken = authToken;
            this.reconcileState();
        }
    };
    WebsocketBroker.setBaseUrl = function (baseUrl) {
        var newHubUrl = baseUrl + "/websocket/v1.0/hub";
        if (this.State.desiredHubUrl !== newHubUrl) {
            this.State.desiredHubUrl = newHubUrl;
            this.reconcileState();
        }
    };
    WebsocketBroker.setWorkspaceArmId = function (workspaceArmId) {
        this.WorkspaceArmId = workspaceArmId;
    };
    WebsocketBroker.replaceSubscriptions = function (before, desired) {
        var _this = this;
        var subscribeTo = desired.filter(function (subscription) { return !_this.subscriptionsContains(before, subscription); });
        var unsubscribeFrom = before.filter(function (subscription) { return !_this.subscriptionsContains(desired, subscription); });
        this.subscribe(subscribeTo);
        this.unsubscribe(unsubscribeFrom);
    };
    WebsocketBroker.subscribe = function (subscriptions) {
        if (subscriptions && subscriptions.length > 0) {
            for (var _i = 0, subscriptions_1 = subscriptions; _i < subscriptions_1.length; _i++) {
                var subscription = subscriptions_1[_i];
                this.State.desiredSubscriptions.push(subscription);
            }
            this.reconcileState();
        }
    };
    WebsocketBroker.unsubscribe = function (subscriptions) {
        var _this = this;
        if (subscriptions && subscriptions.length > 0) {
            var _loop_1 = function (subscription) {
                this_1.State.desiredSubscriptions = this_1.State.desiredSubscriptions.filter(function (sub) { return !_this.subscriptionEquals(sub, subscription); });
            };
            var this_1 = this;
            for (var _i = 0, subscriptions_2 = subscriptions; _i < subscriptions_2.length; _i++) {
                var subscription = subscriptions_2[_i];
                _loop_1(subscription);
            }
            this.reconcileState();
        }
    };
    WebsocketBroker.subscriptionsContains = function (subscriptions, query) {
        for (var _i = 0, subscriptions_3 = subscriptions; _i < subscriptions_3.length; _i++) {
            var sub = subscriptions_3[_i];
            if (this.subscriptionEquals(query, sub)) {
                return true;
            }
        }
        return false;
    };
    WebsocketBroker.subscriptionEquals = function (first, second) {
        return first.entityUri === second.entityUri && first.type === second.type && first.callback === second.callback;
    };
    WebsocketBroker.clearSubscribeTimer = function (isSuccess) {
        if (this.SubscribeRetryTimer) {
            clearTimeout(this.SubscribeRetryTimer);
            this.SubscribeRetryTimer = undefined;
        }
        if (isSuccess) {
            this.SubscribeRetryCount = 0;
        }
    };
    WebsocketBroker.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var authToken_1, exception, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.stop()];
                    case 1:
                        _a.sent();
                        if (!(this.State.desiredAuthToken && this.State.desiredHubUrl)) return [3 /*break*/, 7];
                        authToken_1 = this.State.desiredAuthToken;
                        this.Connection = new HubConnectionBuilder()
                            .withUrl(this.State.desiredHubUrl, {
                            accessTokenFactory: function () { return authToken_1; }
                        })
                            .build();
                        this.Connection.on(HubMethods.Send, this.onSend);
                        this.Connection.on(HubMethods.SubscribeComplete, this.onSubscribeComplete);
                        this.Connection.onclose(this.onClose);
                        exception = void 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, 5, 6]);
                        return [4 /*yield*/, this.Connection.start()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        e_1 = _a.sent();
                        exception = e_1;
                        throw e_1;
                    case 5:
                        this.TrackWebsocketDependency(v4(), "Connect", this.State.actualHubUrl, 0, exception, {});
                        return [7 /*endfinally*/];
                    case 6:
                        this.State.actualAuthToken = authToken_1;
                        this.State.actualHubUrl = this.State.desiredHubUrl;
                        this.updateMessage();
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WebsocketBroker.getNextRetryInterval = function (retryCount) {
        return this.RetryIntervals[Math.min(Math.max(0, retryCount), this.RetryIntervals.length - 1)];
    };
    WebsocketBroker.onClose = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.TrackWebsocketDependency(v4(), "Close", this.State.actualHubUrl, 0, undefined, {});
                        this.resetActualState();
                        this.updateMessage();
                        // attempt to reconnect
                        return [4 /*yield*/, this.reconcileState()];
                    case 1:
                        // attempt to reconnect
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // tslint:disable-next-line: no-any
    WebsocketBroker.onSend = function (message) {
        this.TrackWebsocketDependency(message.messageId, HubMethods.Send, this.State.actualHubUrl, 0, undefined, {});
        var _loop_2 = function (subscription) {
            if (subscription.type === message.type && message.entityUris.indexOf(subscription.entityUri) !== -1) {
                setTimeout(function () {
                    subscription.callback(message);
                }, 0);
            }
        };
        // Look at DesiredState, in case reconcilation logic hasn't updated all subscriptions yet
        for (var _i = 0, _a = this.State.desiredSubscriptions; _i < _a.length; _i++) {
            var subscription = _a[_i];
            _loop_2(subscription);
        }
    };
    WebsocketBroker.onSubscribeComplete = function (message) {
        if (message.sessionId !== this.SessionId) {
            return;
        }
        this.TrackWebsocketDependency(message.messageId, HubMethods.SubscribeComplete, this.State.actualHubUrl, 0, undefined, {});
        if (message.operation.type === SubscribeOperationType.Subscribe &&
            this.State.subscribedGroupNames.indexOf(message.operation.entityUri) === -1) {
            this.State.subscribedGroupNames.push(message.operation.entityUri);
        }
        this.clearSubscribeTimer(true);
        // Process any queued state transitions while waiting for the subscribe completion
        this.reconcileState();
    };
    WebsocketBroker.reconcileState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var subscriptionsToAdd, subscriptionsToRemove;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ReconcileRequests++;
                        if (this.IsReconciling || this.SubscribeRetryTimer) {
                            return [2 /*return*/];
                        }
                        this.IsReconciling = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 7, 8]);
                        _a.label = 2;
                    case 2:
                        if (!(this.ReconcileRequests > 0 && !this.SubscribeRetryTimer)) return [3 /*break*/, 6];
                        this.ReconcileRequests--;
                        if (!(this.State.actualAuthToken !== this.State.desiredAuthToken ||
                            this.State.actualHubUrl !== this.State.desiredHubUrl)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.connect()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        subscriptionsToAdd = this.State.desiredSubscriptions
                            .filter(function (sub) { return _this.State.subscribedGroupNames.indexOf(sub.entityUri) === -1; })
                            .map(function (sub) { return sub.entityUri; });
                        subscriptionsToRemove = this.State.subscribedGroupNames.filter(function (groupName) { return !_this.State.desiredSubscriptions.find(function (sub) { return sub.entityUri === groupName; }); });
                        return [4 /*yield*/, this.updateSubscriptions(subscriptionsToAdd, subscriptionsToRemove)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        this.IsReconciling = false;
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    WebsocketBroker.resetActualState = function () {
        this.State.actualAuthToken = undefined;
        this.State.actualHubUrl = undefined;
        this.State.subscribedGroupNames = [];
    };
    WebsocketBroker.setSubscribeTimer = function (messageId) {
        var _this = this;
        var attempt = this.SubscribeRetryCount;
        var timeout = this.getNextRetryInterval(attempt);
        this.SubscribeRetryTimer = setTimeout(function () {
            _this.TrackWebsocketDependency(messageId, HubMethods.SubscribeComplete, _this.State.actualHubUrl, timeout, undefined, {
                retry: attempt.toString(),
                timeout: true.toString()
            });
            _this.clearSubscribeTimer(false);
            _this.reconcileState();
        }, timeout);
        this.SubscribeRetryCount++;
    };
    WebsocketBroker.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var exception, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.Connection && this.Connection.state === HubConnectionState.Connected)) return [3 /*break*/, 5];
                        this.resetActualState();
                        this.updateMessage();
                        exception = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.Connection.stop()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_2 = _a.sent();
                        exception = e_2;
                        throw e_2;
                    case 4:
                        this.TrackWebsocketDependency(v4(), "Disconnect", this.State.actualHubUrl, 0, exception, {});
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    WebsocketBroker.updateMessage = function () {
        if (this.Connection.state === HubConnectionState.Connected && this.UpdateConnectedState) {
            this.UpdateConnectedState(true);
        }
        else if (this.Connection.state === HubConnectionState.Disconnected &&
            !this.DisconnectMessageId &&
            this.State.desiredSubscriptions.length > 0 &&
            this.UpdateConnectedState) {
            this.UpdateConnectedState(false);
        }
    };
    // tslint:disable-next-line: cyclomatic-complexity
    WebsocketBroker.updateSubscriptions = function (subscriptionsToAdd, subscriptionsToRemove) {
        return __awaiter(this, void 0, void 0, function () {
            var subscribeMessage, _i, subscriptionsToAdd_1, subscription, _a, subscriptionsToRemove_1, subscription, exception, e_3, _loop_3, this_2, _b, subscriptionsToRemove_2, subscription;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (subscriptionsToAdd.length === 0 && subscriptionsToRemove.length === 0) {
                            return [2 /*return*/];
                        }
                        if (!(this.Connection &&
                            this.Connection.state === HubConnectionState.Connected &&
                            this.State.actualAuthToken)) return [3 /*break*/, 6];
                        subscribeMessage = {
                            messageId: v4(),
                            operations: [],
                            sessionId: this.SessionId,
                            userToken: this.State.actualAuthToken,
                            workspaceArmId: this.WorkspaceArmId
                        };
                        for (_i = 0, subscriptionsToAdd_1 = subscriptionsToAdd; _i < subscriptionsToAdd_1.length; _i++) {
                            subscription = subscriptionsToAdd_1[_i];
                            subscribeMessage.operations.push({
                                entityUri: subscription,
                                type: SubscribeOperationType.Subscribe
                            });
                        }
                        for (_a = 0, subscriptionsToRemove_1 = subscriptionsToRemove; _a < subscriptionsToRemove_1.length; _a++) {
                            subscription = subscriptionsToRemove_1[_a];
                            subscribeMessage.operations.push({
                                entityUri: subscription,
                                type: SubscribeOperationType.Unsubscribe
                            });
                        }
                        this.setSubscribeTimer(subscribeMessage.messageId);
                        exception = void 0;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.Connection.invoke(HubMethods.Subscribe, subscribeMessage)];
                    case 2:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_3 = _c.sent();
                        exception = e_3;
                        throw e_3;
                    case 4:
                        this.TrackWebsocketDependency(v4(), HubMethods.Subscribe, this.State.actualHubUrl, 0, exception, {});
                        return [7 /*endfinally*/];
                    case 5:
                        _loop_3 = function (subscription) {
                            this_2.State.subscribedGroupNames = this_2.State.subscribedGroupNames.filter(function (groupName) { return groupName !== subscription; });
                        };
                        this_2 = this;
                        // Do not need to wait for ACK on unsubscribe
                        for (_b = 0, subscriptionsToRemove_2 = subscriptionsToRemove; _b < subscriptionsToRemove_2.length; _b++) {
                            subscription = subscriptionsToRemove_2[_b];
                            _loop_3(subscription);
                        }
                        // If there were not subscribe requests, then we don't need to wait for an ACK
                        if (subscriptionsToAdd.length === 0) {
                            this.clearSubscribeTimer(true);
                        }
                        _c.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    WebsocketBroker.IsReconciling = false;
    WebsocketBroker.ReconcileRequests = 0;
    WebsocketBroker.RetryIntervals = [1000, 2000, 5000, 10000, 30000, 60000]; // in ms
    WebsocketBroker.State = { desiredSubscriptions: [], subscribedGroupNames: [] };
    WebsocketBroker.SubscribeRetryCount = 0;
    return WebsocketBroker;
}());

var WebsocketSubscriptionManager = /** @class */ (function () {
    function WebsocketSubscriptionManager() {
        this.currentSubscriptions = [];
    }
    WebsocketSubscriptionManager.prototype.replaceSubscriptions = function (subscriptions) {
        WebsocketBroker.replaceSubscriptions(this.currentSubscriptions, subscriptions);
        this.currentSubscriptions = subscriptions;
    };
    WebsocketSubscriptionManager.prototype.unsubscribe = function () {
        WebsocketBroker.unsubscribe(this.currentSubscriptions);
        this.currentSubscriptions = [];
    };
    return WebsocketSubscriptionManager;
}());

var EventNames = {
    ArtifactContentChangedEvent: "Microsoft.MachineLearning.Artifact.Contracts.Messages.ArtifactContentChangedEvent",
    RunMetricChangedEvent: "Microsoft.MachineLearning.RunHistory.Contracts.Messages.RunMetricChangedEvent",
    RunStatusChangedEvent: "Microsoft.MachineLearning.RunHistory.Contracts.Messages.RunStatusChangedEvent"
};

export { EventNames, WebsocketBroker, WebsocketSubscriptionManager };
//# sourceMappingURL=index.js.map
