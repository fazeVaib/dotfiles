/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
export var CloudError = CloudErrorMapper;
export var BaseResource = BaseResourceMapper;
export var Resource = {
    serializedName: "Resource",
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            eTag: {
                readOnly: true,
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SubResource = {
    serializedName: "SubResource",
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            etag: {
                readOnly: true,
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Expression = {
    serializedName: "Expression",
    type: {
        name: "Composite",
        className: "Expression",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'Expression',
                type: {
                    name: "String"
                }
            },
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SecretBase = {
    serializedName: "SecretBase",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "SecretBase",
        className: "SecretBase",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SecureString = {
    serializedName: "SecureString",
    type: {
        name: "Composite",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        uberParent: "SecretBase",
        className: "SecureString",
        modelProperties: tslib_1.__assign({}, SecretBase.type.modelProperties, { value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "String"
                }
            } })
    }
};
export var LinkedServiceReference = {
    serializedName: "LinkedServiceReference",
    type: {
        name: "Composite",
        className: "LinkedServiceReference",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'LinkedServiceReference',
                type: {
                    name: "String"
                }
            },
            referenceName: {
                required: true,
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        }
    }
};
export var AzureKeyVaultSecretReference = {
    serializedName: "AzureKeyVaultSecret",
    type: {
        name: "Composite",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        uberParent: "SecretBase",
        className: "AzureKeyVaultSecretReference",
        modelProperties: tslib_1.__assign({}, SecretBase.type.modelProperties, { store: {
                required: true,
                serializedName: "store",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, secretName: {
                required: true,
                serializedName: "secretName",
                type: {
                    name: "Object"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "Object"
                }
            } })
    }
};
export var FactoryIdentity = {
    serializedName: "FactoryIdentity",
    type: {
        name: "Composite",
        className: "FactoryIdentity",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'SystemAssigned',
                type: {
                    name: "String"
                }
            },
            principalId: {
                readOnly: true,
                serializedName: "principalId",
                type: {
                    name: "Uuid"
                }
            },
            tenantId: {
                readOnly: true,
                serializedName: "tenantId",
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
export var FactoryRepoConfiguration = {
    serializedName: "FactoryRepoConfiguration",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "FactoryRepoConfiguration",
        className: "FactoryRepoConfiguration",
        modelProperties: {
            accountName: {
                required: true,
                serializedName: "accountName",
                type: {
                    name: "String"
                }
            },
            repositoryName: {
                required: true,
                serializedName: "repositoryName",
                type: {
                    name: "String"
                }
            },
            collaborationBranch: {
                required: true,
                serializedName: "collaborationBranch",
                type: {
                    name: "String"
                }
            },
            rootFolder: {
                required: true,
                serializedName: "rootFolder",
                type: {
                    name: "String"
                }
            },
            lastCommitId: {
                serializedName: "lastCommitId",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Factory = {
    serializedName: "Factory",
    type: {
        name: "Composite",
        className: "Factory",
        modelProperties: tslib_1.__assign({}, Resource.type.modelProperties, { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            }, provisioningState: {
                readOnly: true,
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, createTime: {
                readOnly: true,
                serializedName: "properties.createTime",
                type: {
                    name: "DateTime"
                }
            }, version: {
                readOnly: true,
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, repoConfiguration: {
                serializedName: "properties.repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            } }),
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntime = {
    serializedName: "IntegrationRuntime",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "IntegrationRuntime",
        className: "IntegrationRuntime",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeResource = {
    serializedName: "IntegrationRuntimeResource",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { properties: {
                required: true,
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } })
    }
};
export var IntegrationRuntimeReference = {
    serializedName: "IntegrationRuntimeReference",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeReference",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'IntegrationRuntimeReference',
                type: {
                    name: "String"
                }
            },
            referenceName: {
                required: true,
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        }
    }
};
export var IntegrationRuntimeStatus = {
    serializedName: "IntegrationRuntimeStatus",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "IntegrationRuntimeStatus",
        className: "IntegrationRuntimeStatus",
        modelProperties: {
            dataFactoryName: {
                readOnly: true,
                serializedName: "dataFactoryName",
                type: {
                    name: "String"
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeStatusResponse = {
    serializedName: "IntegrationRuntimeStatusResponse",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusResponse",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            properties: {
                required: true,
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeStatus",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        }
    }
};
export var IntegrationRuntimeStatusListResponse = {
    serializedName: "IntegrationRuntimeStatusListResponse",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeStatusResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateIntegrationRuntimeRequest = {
    serializedName: "UpdateIntegrationRuntimeRequest",
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeRequest",
        modelProperties: {
            autoUpdate: {
                serializedName: "autoUpdate",
                type: {
                    name: "String"
                }
            },
            updateDelayOffset: {
                serializedName: "updateDelayOffset",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateIntegrationRuntimeNodeRequest = {
    serializedName: "UpdateIntegrationRuntimeNodeRequest",
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeNodeRequest",
        modelProperties: {
            concurrentJobsLimit: {
                serializedName: "concurrentJobsLimit",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var LinkedIntegrationRuntimeRequest = {
    serializedName: "LinkedIntegrationRuntimeRequest",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRequest",
        modelProperties: {
            linkedFactoryName: {
                required: true,
                serializedName: "factoryName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CreateLinkedIntegrationRuntimeRequest = {
    serializedName: "CreateLinkedIntegrationRuntimeRequest",
    type: {
        name: "Composite",
        className: "CreateLinkedIntegrationRuntimeRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                serializedName: "dataFactoryLocation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ParameterSpecification = {
    serializedName: "ParameterSpecification",
    type: {
        name: "Composite",
        className: "ParameterSpecification",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var LinkedService = {
    serializedName: "LinkedService",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "LinkedService",
        className: "LinkedService",
        modelProperties: {
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ParameterSpecification"
                        }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var LinkedServiceResource = {
    serializedName: "LinkedServiceResource",
    type: {
        name: "Composite",
        className: "LinkedServiceResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { properties: {
                required: true,
                serializedName: "properties",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedService",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } })
    }
};
export var DatasetFolder = {
    serializedName: "Dataset_folder",
    type: {
        name: "Composite",
        className: "DatasetFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Dataset = {
    serializedName: "Dataset",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "Dataset",
        className: "Dataset",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            structure: {
                serializedName: "structure",
                type: {
                    name: "Object"
                }
            },
            linkedServiceName: {
                required: true,
                serializedName: "linkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ParameterSpecification"
                        }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DatasetFolder"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var DatasetResource = {
    serializedName: "DatasetResource",
    type: {
        name: "Composite",
        className: "DatasetResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { properties: {
                required: true,
                serializedName: "properties",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Dataset",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } })
    }
};
export var ActivityDependency = {
    serializedName: "ActivityDependency",
    type: {
        name: "Composite",
        className: "ActivityDependency",
        modelProperties: {
            activity: {
                required: true,
                serializedName: "activity",
                type: {
                    name: "String"
                }
            },
            dependencyConditions: {
                required: true,
                serializedName: "dependencyConditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var UserProperty = {
    serializedName: "UserProperty",
    type: {
        name: "Composite",
        className: "UserProperty",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var Activity = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "Activity",
        className: "Activity",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityDependency",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            userProperties: {
                serializedName: "userProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserProperty"
                        }
                    }
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var VariableSpecification = {
    serializedName: "VariableSpecification",
    type: {
        name: "Composite",
        className: "VariableSpecification",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var PipelineFolder = {
    serializedName: "Pipeline_folder",
    type: {
        name: "Composite",
        className: "PipelineFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var PipelineResource = {
    serializedName: "PipelineResource",
    type: {
        name: "Composite",
        className: "PipelineResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, activities: {
                serializedName: "properties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ParameterSpecification"
                        }
                    }
                }
            }, variables: {
                serializedName: "properties.variables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "VariableSpecification"
                        }
                    }
                }
            }, concurrency: {
                serializedName: "properties.concurrency",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, annotations: {
                serializedName: "properties.annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "PipelineFolder"
                }
            } }),
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var Trigger = {
    serializedName: "Trigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "Trigger",
        className: "Trigger",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            runtimeState: {
                readOnly: true,
                serializedName: "runtimeState",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var TriggerResource = {
    serializedName: "TriggerResource",
    type: {
        name: "Composite",
        className: "TriggerResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { properties: {
                required: true,
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Trigger",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } })
    }
};
export var CreateRunResponse = {
    serializedName: "CreateRunResponse",
    type: {
        name: "Composite",
        className: "CreateRunResponse",
        modelProperties: {
            runId: {
                required: true,
                serializedName: "runId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var FactoryVSTSConfiguration = {
    serializedName: "FactoryVSTSConfiguration",
    type: {
        name: "Composite",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        uberParent: "FactoryRepoConfiguration",
        className: "FactoryVSTSConfiguration",
        modelProperties: tslib_1.__assign({}, FactoryRepoConfiguration.type.modelProperties, { projectName: {
                required: true,
                serializedName: "projectName",
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
export var FactoryGitHubConfiguration = {
    serializedName: "FactoryGitHubConfiguration",
    type: {
        name: "Composite",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        uberParent: "FactoryRepoConfiguration",
        className: "FactoryGitHubConfiguration",
        modelProperties: tslib_1.__assign({}, FactoryRepoConfiguration.type.modelProperties, { hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            } })
    }
};
export var FactoryRepoUpdate = {
    serializedName: "FactoryRepoUpdate",
    type: {
        name: "Composite",
        className: "FactoryRepoUpdate",
        modelProperties: {
            factoryResourceId: {
                serializedName: "factoryResourceId",
                type: {
                    name: "String"
                }
            },
            repoConfiguration: {
                serializedName: "repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            }
        }
    }
};
export var GitHubAccessTokenRequest = {
    serializedName: "GitHubAccessTokenRequest",
    type: {
        name: "Composite",
        className: "GitHubAccessTokenRequest",
        modelProperties: {
            gitHubAccessCode: {
                required: true,
                serializedName: "gitHubAccessCode",
                type: {
                    name: "String"
                }
            },
            gitHubClientId: {
                serializedName: "gitHubClientId",
                type: {
                    name: "String"
                }
            },
            gitHubAccessTokenBaseUrl: {
                required: true,
                serializedName: "gitHubAccessTokenBaseUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var GitHubAccessTokenResponse = {
    serializedName: "GitHubAccessTokenResponse",
    type: {
        name: "Composite",
        className: "GitHubAccessTokenResponse",
        modelProperties: {
            gitHubAccessToken: {
                serializedName: "gitHubAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var PipelineReference = {
    serializedName: "PipelineReference",
    type: {
        name: "Composite",
        className: "PipelineReference",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'PipelineReference',
                type: {
                    name: "String"
                }
            },
            referenceName: {
                required: true,
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TriggerPipelineReference = {
    serializedName: "TriggerPipelineReference",
    type: {
        name: "Composite",
        className: "TriggerPipelineReference",
        modelProperties: {
            pipelineReference: {
                serializedName: "pipelineReference",
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        }
    }
};
export var FactoryUpdateParameters = {
    serializedName: "FactoryUpdateParameters",
    type: {
        name: "Composite",
        className: "FactoryUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            }
        }
    }
};
export var DatasetReference = {
    serializedName: "DatasetReference",
    type: {
        name: "Composite",
        className: "DatasetReference",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'DatasetReference',
                type: {
                    name: "String"
                }
            },
            referenceName: {
                required: true,
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        }
    }
};
export var RunQueryFilter = {
    serializedName: "RunQueryFilter",
    type: {
        name: "Composite",
        className: "RunQueryFilter",
        modelProperties: {
            operand: {
                required: true,
                serializedName: "operand",
                type: {
                    name: "String"
                }
            },
            operator: {
                required: true,
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            values: {
                required: true,
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var RunQueryOrderBy = {
    serializedName: "RunQueryOrderBy",
    type: {
        name: "Composite",
        className: "RunQueryOrderBy",
        modelProperties: {
            orderBy: {
                required: true,
                serializedName: "orderBy",
                type: {
                    name: "String"
                }
            },
            order: {
                required: true,
                serializedName: "order",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var RunFilterParameters = {
    serializedName: "RunFilterParameters",
    type: {
        name: "Composite",
        className: "RunFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            },
            lastUpdatedAfter: {
                required: true,
                serializedName: "lastUpdatedAfter",
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedBefore: {
                required: true,
                serializedName: "lastUpdatedBefore",
                type: {
                    name: "DateTime"
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryFilter"
                        }
                    }
                }
            },
            orderBy: {
                serializedName: "orderBy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryOrderBy"
                        }
                    }
                }
            }
        }
    }
};
export var PipelineRunInvokedBy = {
    serializedName: "PipelineRunInvokedBy",
    type: {
        name: "Composite",
        className: "PipelineRunInvokedBy",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            invokedByType: {
                readOnly: true,
                serializedName: "invokedByType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var PipelineRun = {
    serializedName: "PipelineRun",
    type: {
        name: "Composite",
        className: "PipelineRun",
        modelProperties: {
            runId: {
                readOnly: true,
                serializedName: "runId",
                type: {
                    name: "String"
                }
            },
            pipelineName: {
                readOnly: true,
                serializedName: "pipelineName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                readOnly: true,
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            invokedBy: {
                readOnly: true,
                serializedName: "invokedBy",
                type: {
                    name: "Composite",
                    className: "PipelineRunInvokedBy"
                }
            },
            lastUpdated: {
                readOnly: true,
                serializedName: "lastUpdated",
                type: {
                    name: "DateTime"
                }
            },
            runStart: {
                readOnly: true,
                serializedName: "runStart",
                type: {
                    name: "DateTime"
                }
            },
            runEnd: {
                readOnly: true,
                serializedName: "runEnd",
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                readOnly: true,
                serializedName: "durationInMs",
                type: {
                    name: "Number"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var PipelineRunsQueryResponse = {
    serializedName: "PipelineRunsQueryResponse",
    type: {
        name: "Composite",
        className: "PipelineRunsQueryResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineRun",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ActivityRun = {
    serializedName: "ActivityRun",
    type: {
        name: "Composite",
        className: "ActivityRun",
        modelProperties: {
            pipelineName: {
                readOnly: true,
                serializedName: "pipelineName",
                type: {
                    name: "String"
                }
            },
            pipelineRunId: {
                readOnly: true,
                serializedName: "pipelineRunId",
                type: {
                    name: "String"
                }
            },
            activityName: {
                readOnly: true,
                serializedName: "activityName",
                type: {
                    name: "String"
                }
            },
            activityType: {
                readOnly: true,
                serializedName: "activityType",
                type: {
                    name: "String"
                }
            },
            activityRunId: {
                readOnly: true,
                serializedName: "activityRunId",
                type: {
                    name: "String"
                }
            },
            linkedServiceName: {
                readOnly: true,
                serializedName: "linkedServiceName",
                type: {
                    name: "String"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            activityRunStart: {
                readOnly: true,
                serializedName: "activityRunStart",
                type: {
                    name: "DateTime"
                }
            },
            activityRunEnd: {
                readOnly: true,
                serializedName: "activityRunEnd",
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                readOnly: true,
                serializedName: "durationInMs",
                type: {
                    name: "Number"
                }
            },
            input: {
                readOnly: true,
                serializedName: "input",
                type: {
                    name: "Object"
                }
            },
            output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Object"
                }
            },
            error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Object"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ActivityRunsQueryResponse = {
    serializedName: "ActivityRunsQueryResponse",
    type: {
        name: "Composite",
        className: "ActivityRunsQueryResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityRun",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TriggerRun = {
    serializedName: "TriggerRun",
    type: {
        name: "Composite",
        className: "TriggerRun",
        modelProperties: {
            triggerRunId: {
                readOnly: true,
                serializedName: "triggerRunId",
                type: {
                    name: "String"
                }
            },
            triggerName: {
                readOnly: true,
                serializedName: "triggerName",
                type: {
                    name: "String"
                }
            },
            triggerType: {
                readOnly: true,
                serializedName: "triggerType",
                type: {
                    name: "String"
                }
            },
            triggerRunTimestamp: {
                readOnly: true,
                serializedName: "triggerRunTimestamp",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            properties: {
                readOnly: true,
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            triggeredPipelines: {
                readOnly: true,
                serializedName: "triggeredPipelines",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var TriggerRunsQueryResponse = {
    serializedName: "TriggerRunsQueryResponse",
    type: {
        name: "Composite",
        className: "TriggerRunsQueryResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerRun",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var RerunTumblingWindowTriggerActionParameters = {
    serializedName: "RerunTumblingWindowTriggerActionParameters",
    type: {
        name: "Composite",
        className: "RerunTumblingWindowTriggerActionParameters",
        modelProperties: {
            startTime: {
                required: true,
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                required: true,
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            maxConcurrency: {
                required: true,
                serializedName: "maxConcurrency",
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var RerunTumblingWindowTrigger = {
    serializedName: "RerunTumblingWindowTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "RerunTumblingWindowTrigger",
        modelProperties: tslib_1.__assign({}, Trigger.type.modelProperties, { parentTrigger: {
                serializedName: "typeProperties.parentTrigger",
                type: {
                    name: "Object"
                }
            }, requestedStartTime: {
                required: true,
                serializedName: "typeProperties.requestedStartTime",
                type: {
                    name: "DateTime"
                }
            }, requestedEndTime: {
                required: true,
                serializedName: "typeProperties.requestedEndTime",
                type: {
                    name: "DateTime"
                }
            }, maxConcurrency: {
                required: true,
                serializedName: "typeProperties.maxConcurrency",
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var RerunTriggerResource = {
    serializedName: "RerunTriggerResource",
    type: {
        name: "Composite",
        className: "RerunTriggerResource",
        modelProperties: tslib_1.__assign({}, SubResource.type.modelProperties, { properties: {
                required: true,
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RerunTumblingWindowTrigger",
                    additionalProperties: Trigger.type.additionalProperties
                }
            } })
    }
};
export var OperationDisplay = {
    serializedName: "Operation_display",
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationLogSpecification = {
    serializedName: "OperationLogSpecification",
    type: {
        name: "Composite",
        className: "OperationLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationMetricAvailability = {
    serializedName: "OperationMetricAvailability",
    type: {
        name: "Composite",
        className: "OperationMetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationMetricDimension = {
    serializedName: "OperationMetricDimension",
    type: {
        name: "Composite",
        className: "OperationMetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var OperationMetricSpecification = {
    serializedName: "OperationMetricSpecification",
    type: {
        name: "Composite",
        className: "OperationMetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmAccount: {
                serializedName: "sourceMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricAvailability"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricDimension"
                        }
                    }
                }
            }
        }
    }
};
export var OperationServiceSpecification = {
    serializedName: "OperationServiceSpecification",
    type: {
        name: "Composite",
        className: "OperationServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationLogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
export var Operation = {
    serializedName: "Operation",
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationServiceSpecification"
                }
            }
        }
    }
};
export var DependencyReference = {
    serializedName: "DependencyReference",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "DependencyReference",
        className: "DependencyReference",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SelfDependencyTumblingWindowTriggerReference = {
    serializedName: "SelfDependencyTumblingWindowTriggerReference",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
        uberParent: "DependencyReference",
        className: "SelfDependencyTumblingWindowTriggerReference",
        modelProperties: tslib_1.__assign({}, DependencyReference.type.modelProperties, { offset: {
                required: true,
                serializedName: "offset",
                constraints: {
                    MaxLength: 15,
                    MinLength: 8,
                    Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                },
                type: {
                    name: "String"
                }
            }, size: {
                serializedName: "size",
                constraints: {
                    MaxLength: 15,
                    MinLength: 8,
                    Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                },
                type: {
                    name: "String"
                }
            } })
    }
};
export var TriggerReference = {
    serializedName: "TriggerReference",
    type: {
        name: "Composite",
        className: "TriggerReference",
        modelProperties: {
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'TriggerReference',
                type: {
                    name: "String"
                }
            },
            referenceName: {
                required: true,
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TriggerDependencyReference = {
    serializedName: "TriggerDependencyReference",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
        uberParent: "DependencyReference",
        className: "TriggerDependencyReference",
        modelProperties: tslib_1.__assign({}, DependencyReference.type.modelProperties, { referenceTrigger: {
                required: true,
                serializedName: "referenceTrigger",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "TriggerReference"
                }
            } })
    }
};
export var TumblingWindowTriggerDependencyReference = {
    serializedName: "TumblingWindowTriggerDependencyReference",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
        uberParent: "DependencyReference",
        className: "TumblingWindowTriggerDependencyReference",
        modelProperties: tslib_1.__assign({}, TriggerDependencyReference.type.modelProperties, { offset: {
                serializedName: "offset",
                constraints: {
                    MaxLength: 15,
                    MinLength: 8,
                    Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                },
                type: {
                    name: "String"
                }
            }, size: {
                serializedName: "size",
                constraints: {
                    MaxLength: 15,
                    MinLength: 8,
                    Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                },
                type: {
                    name: "String"
                }
            } })
    }
};
export var RetryPolicy = {
    serializedName: "RetryPolicy",
    type: {
        name: "Composite",
        className: "RetryPolicy",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Object"
                }
            },
            intervalInSeconds: {
                serializedName: "intervalInSeconds",
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var TumblingWindowTrigger = {
    serializedName: "TumblingWindowTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "TumblingWindowTrigger",
        modelProperties: tslib_1.__assign({}, Trigger.type.modelProperties, { pipelineProperty: {
                required: true,
                serializedName: "pipeline",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference"
                }
            }, frequency: {
                required: true,
                serializedName: "typeProperties.frequency",
                type: {
                    name: "String"
                }
            }, interval: {
                required: true,
                serializedName: "typeProperties.interval",
                type: {
                    name: "Number"
                }
            }, startTime: {
                required: true,
                serializedName: "typeProperties.startTime",
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "typeProperties.endTime",
                type: {
                    name: "DateTime"
                }
            }, delay: {
                serializedName: "typeProperties.delay",
                type: {
                    name: "Object"
                }
            }, maxConcurrency: {
                required: true,
                serializedName: "typeProperties.maxConcurrency",
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, retryPolicy: {
                serializedName: "typeProperties.retryPolicy",
                type: {
                    name: "Composite",
                    className: "RetryPolicy"
                }
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DependencyReference"
                        }
                    }
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var MultiplePipelineTrigger = {
    serializedName: "MultiplePipelineTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "MultiplePipelineTrigger",
        modelProperties: tslib_1.__assign({}, Trigger.type.modelProperties, { pipelines: {
                serializedName: "pipelines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerPipelineReference"
                        }
                    }
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var BlobEventsTrigger = {
    serializedName: "BlobEventsTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "BlobEventsTrigger",
        modelProperties: tslib_1.__assign({}, MultiplePipelineTrigger.type.modelProperties, { blobPathBeginsWith: {
                serializedName: "typeProperties.blobPathBeginsWith",
                type: {
                    name: "String"
                }
            }, blobPathEndsWith: {
                serializedName: "typeProperties.blobPathEndsWith",
                type: {
                    name: "String"
                }
            }, events: {
                required: true,
                serializedName: "typeProperties.events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, scope: {
                required: true,
                serializedName: "typeProperties.scope",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var BlobTrigger = {
    serializedName: "BlobTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "BlobTrigger",
        modelProperties: tslib_1.__assign({}, MultiplePipelineTrigger.type.modelProperties, { folderPath: {
                required: true,
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "String"
                }
            }, maxConcurrency: {
                required: true,
                serializedName: "typeProperties.maxConcurrency",
                type: {
                    name: "Number"
                }
            }, linkedService: {
                required: true,
                serializedName: "typeProperties.linkedService",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var RecurrenceScheduleOccurrence = {
    serializedName: "RecurrenceScheduleOccurrence",
    type: {
        name: "Composite",
        className: "RecurrenceScheduleOccurrence",
        modelProperties: {
            day: {
                serializedName: "day",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ]
                }
            },
            occurrence: {
                serializedName: "occurrence",
                type: {
                    name: "Number"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var RecurrenceSchedule = {
    serializedName: "RecurrenceSchedule",
    type: {
        name: "Composite",
        className: "RecurrenceSchedule",
        modelProperties: {
            minutes: {
                serializedName: "minutes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            hours: {
                serializedName: "hours",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            weekDays: {
                serializedName: "weekDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            monthDays: {
                serializedName: "monthDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            monthlyOccurrences: {
                serializedName: "monthlyOccurrences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecurrenceScheduleOccurrence",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ScheduleTriggerRecurrence = {
    serializedName: "ScheduleTriggerRecurrence",
    type: {
        name: "Composite",
        className: "ScheduleTriggerRecurrence",
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String"
                }
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            },
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "Composite",
                    className: "RecurrenceSchedule",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ScheduleTrigger = {
    serializedName: "ScheduleTrigger",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        uberParent: "Trigger",
        className: "ScheduleTrigger",
        modelProperties: tslib_1.__assign({}, MultiplePipelineTrigger.type.modelProperties, { recurrence: {
                required: true,
                serializedName: "typeProperties.recurrence",
                type: {
                    name: "Composite",
                    className: "ScheduleTriggerRecurrence",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Trigger.type.additionalProperties
    }
};
export var ResponsysLinkedService = {
    serializedName: "Responsys",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ResponsysLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureDatabricksLinkedService = {
    serializedName: "AzureDatabricks",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureDatabricksLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { domain: {
                required: true,
                serializedName: "typeProperties.domain",
                type: {
                    name: "Object"
                }
            }, accessToken: {
                required: true,
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, existingClusterId: {
                serializedName: "typeProperties.existingClusterId",
                type: {
                    name: "Object"
                }
            }, newClusterVersion: {
                serializedName: "typeProperties.newClusterVersion",
                type: {
                    name: "Object"
                }
            }, newClusterNumOfWorker: {
                serializedName: "typeProperties.newClusterNumOfWorker",
                type: {
                    name: "Object"
                }
            }, newClusterNodeType: {
                serializedName: "typeProperties.newClusterNodeType",
                type: {
                    name: "Object"
                }
            }, newClusterSparkConf: {
                serializedName: "typeProperties.newClusterSparkConf",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, newClusterSparkEnvVars: {
                serializedName: "typeProperties.newClusterSparkEnvVars",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, newClusterCustomTags: {
                serializedName: "typeProperties.newClusterCustomTags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureDataLakeAnalyticsLinkedService = {
    serializedName: "AzureDataLakeAnalytics",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureDataLakeAnalyticsLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { accountName: {
                required: true,
                serializedName: "typeProperties.accountName",
                type: {
                    name: "Object"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                required: true,
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "Object"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "Object"
                }
            }, dataLakeAnalyticsUri: {
                serializedName: "typeProperties.dataLakeAnalyticsUri",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ScriptAction = {
    serializedName: "ScriptAction",
    type: {
        name: "Composite",
        className: "ScriptAction",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            uri: {
                required: true,
                serializedName: "uri",
                type: {
                    name: "String"
                }
            },
            roles: {
                required: true,
                serializedName: "roles",
                type: {
                    name: "Object"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var HDInsightOnDemandLinkedService = {
    serializedName: "HDInsightOnDemand",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HDInsightOnDemandLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { clusterSize: {
                required: true,
                serializedName: "typeProperties.clusterSize",
                type: {
                    name: "Object"
                }
            }, timeToLive: {
                required: true,
                serializedName: "typeProperties.timeToLive",
                type: {
                    name: "Object"
                }
            }, version: {
                required: true,
                serializedName: "typeProperties.version",
                type: {
                    name: "Object"
                }
            }, linkedServiceName: {
                required: true,
                serializedName: "typeProperties.linkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hostSubscriptionId: {
                required: true,
                serializedName: "typeProperties.hostSubscriptionId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                required: true,
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, clusterResourceGroup: {
                required: true,
                serializedName: "typeProperties.clusterResourceGroup",
                type: {
                    name: "Object"
                }
            }, clusterNamePrefix: {
                serializedName: "typeProperties.clusterNamePrefix",
                type: {
                    name: "Object"
                }
            }, clusterUserName: {
                serializedName: "typeProperties.clusterUserName",
                type: {
                    name: "Object"
                }
            }, clusterPassword: {
                serializedName: "typeProperties.clusterPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clusterSshUserName: {
                serializedName: "typeProperties.clusterSshUserName",
                type: {
                    name: "Object"
                }
            }, clusterSshPassword: {
                serializedName: "typeProperties.clusterSshPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, additionalLinkedServiceNames: {
                serializedName: "typeProperties.additionalLinkedServiceNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, clusterType: {
                serializedName: "typeProperties.clusterType",
                type: {
                    name: "Object"
                }
            }, sparkVersion: {
                serializedName: "typeProperties.sparkVersion",
                type: {
                    name: "Object"
                }
            }, coreConfiguration: {
                serializedName: "typeProperties.coreConfiguration",
                type: {
                    name: "Object"
                }
            }, hBaseConfiguration: {
                serializedName: "typeProperties.hBaseConfiguration",
                type: {
                    name: "Object"
                }
            }, hdfsConfiguration: {
                serializedName: "typeProperties.hdfsConfiguration",
                type: {
                    name: "Object"
                }
            }, hiveConfiguration: {
                serializedName: "typeProperties.hiveConfiguration",
                type: {
                    name: "Object"
                }
            }, mapReduceConfiguration: {
                serializedName: "typeProperties.mapReduceConfiguration",
                type: {
                    name: "Object"
                }
            }, oozieConfiguration: {
                serializedName: "typeProperties.oozieConfiguration",
                type: {
                    name: "Object"
                }
            }, stormConfiguration: {
                serializedName: "typeProperties.stormConfiguration",
                type: {
                    name: "Object"
                }
            }, yarnConfiguration: {
                serializedName: "typeProperties.yarnConfiguration",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            }, headNodeSize: {
                serializedName: "typeProperties.headNodeSize",
                type: {
                    name: "Object"
                }
            }, dataNodeSize: {
                serializedName: "typeProperties.dataNodeSize",
                type: {
                    name: "Object"
                }
            }, zookeeperNodeSize: {
                serializedName: "typeProperties.zookeeperNodeSize",
                type: {
                    name: "Object"
                }
            }, scriptActions: {
                serializedName: "typeProperties.scriptActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptAction"
                        }
                    }
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SalesforceMarketingCloudLinkedService = {
    serializedName: "SalesforceMarketingCloud",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SalesforceMarketingCloudLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var NetezzaLinkedService = {
    serializedName: "Netezza",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "NetezzaLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var VerticaLinkedService = {
    serializedName: "Vertica",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "VerticaLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ZohoLinkedService = {
    serializedName: "Zoho",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ZohoLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var XeroLinkedService = {
    serializedName: "Xero",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "XeroLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SquareLinkedService = {
    serializedName: "Square",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SquareLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, redirectUri: {
                required: true,
                serializedName: "typeProperties.redirectUri",
                type: {
                    name: "Object"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SparkLinkedService = {
    serializedName: "Spark",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SparkLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                required: true,
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "Object"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ShopifyLinkedService = {
    serializedName: "Shopify",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ShopifyLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ServiceNowLinkedService = {
    serializedName: "ServiceNow",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ServiceNowLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var QuickBooksLinkedService = {
    serializedName: "QuickBooks",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "QuickBooksLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, companyId: {
                required: true,
                serializedName: "typeProperties.companyId",
                type: {
                    name: "Object"
                }
            }, consumerKey: {
                required: true,
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "Object"
                }
            }, consumerSecret: {
                required: true,
                serializedName: "typeProperties.consumerSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                required: true,
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessTokenSecret: {
                required: true,
                serializedName: "typeProperties.accessTokenSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var PrestoLinkedService = {
    serializedName: "Presto",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "PrestoLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, serverVersion: {
                required: true,
                serializedName: "typeProperties.serverVersion",
                type: {
                    name: "Object"
                }
            }, catalog: {
                required: true,
                serializedName: "typeProperties.catalog",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, timeZoneID: {
                serializedName: "typeProperties.timeZoneID",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var PhoenixLinkedService = {
    serializedName: "Phoenix",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "PhoenixLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var PaypalLinkedService = {
    serializedName: "Paypal",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "PaypalLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var MarketoLinkedService = {
    serializedName: "Marketo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "MarketoLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var MariaDBLinkedService = {
    serializedName: "MariaDB",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "MariaDBLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var MagentoLinkedService = {
    serializedName: "Magento",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "MagentoLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var JiraLinkedService = {
    serializedName: "Jira",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "JiraLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, username: {
                required: true,
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ImpalaLinkedService = {
    serializedName: "Impala",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ImpalaLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HubspotLinkedService = {
    serializedName: "Hubspot",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HubspotLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HiveLinkedService = {
    serializedName: "Hive",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HiveLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, serviceDiscoveryMode: {
                serializedName: "typeProperties.serviceDiscoveryMode",
                type: {
                    name: "Object"
                }
            }, zooKeeperNameSpace: {
                serializedName: "typeProperties.zooKeeperNameSpace",
                type: {
                    name: "Object"
                }
            }, useNativeQuery: {
                serializedName: "typeProperties.useNativeQuery",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "Object"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HBaseLinkedService = {
    serializedName: "HBase",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HBaseLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var GreenplumLinkedService = {
    serializedName: "Greenplum",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "GreenplumLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var GoogleBigQueryLinkedService = {
    serializedName: "GoogleBigQuery",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "GoogleBigQueryLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { project: {
                required: true,
                serializedName: "typeProperties.project",
                type: {
                    name: "Object"
                }
            }, additionalProjects: {
                serializedName: "typeProperties.additionalProjects",
                type: {
                    name: "Object"
                }
            }, requestGoogleDriveScope: {
                serializedName: "typeProperties.requestGoogleDriveScope",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "Object"
                }
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "Object"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "Object"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var EloquaLinkedService = {
    serializedName: "Eloqua",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "EloquaLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, username: {
                required: true,
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var DrillLinkedService = {
    serializedName: "Drill",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "DrillLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var CouchbaseLinkedService = {
    serializedName: "Couchbase",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "CouchbaseLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, credString: {
                serializedName: "typeProperties.credString",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ConcurLinkedService = {
    serializedName: "Concur",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ConcurLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, username: {
                required: true,
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzurePostgreSqlLinkedService = {
    serializedName: "AzurePostgreSql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzurePostgreSqlLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AmazonMWSLinkedService = {
    serializedName: "AmazonMWS",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AmazonMWSLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { endpoint: {
                required: true,
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "Object"
                }
            }, marketplaceID: {
                required: true,
                serializedName: "typeProperties.marketplaceID",
                type: {
                    name: "Object"
                }
            }, sellerID: {
                required: true,
                serializedName: "typeProperties.sellerID",
                type: {
                    name: "Object"
                }
            }, mwsAuthToken: {
                serializedName: "typeProperties.mwsAuthToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessKeyId: {
                required: true,
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "Object"
                }
            }, secretKey: {
                serializedName: "typeProperties.secretKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "Object"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "Object"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SapHanaLinkedService = {
    serializedName: "SapHana",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SapHanaLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SapBWLinkedService = {
    serializedName: "SapBW",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SapBWLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, systemNumber: {
                required: true,
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "Object"
                }
            }, clientId: {
                required: true,
                serializedName: "typeProperties.clientId",
                type: {
                    name: "Object"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SftpServerLinkedService = {
    serializedName: "Sftp",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SftpServerLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            }, privateKeyPath: {
                serializedName: "typeProperties.privateKeyPath",
                type: {
                    name: "Object"
                }
            }, privateKeyContent: {
                serializedName: "typeProperties.privateKeyContent",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, passPhrase: {
                serializedName: "typeProperties.passPhrase",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, skipHostKeyValidation: {
                serializedName: "typeProperties.skipHostKeyValidation",
                type: {
                    name: "Object"
                }
            }, hostKeyFingerprint: {
                serializedName: "typeProperties.hostKeyFingerprint",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var FtpServerLinkedService = {
    serializedName: "FtpServer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "FtpServerLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HttpLinkedService = {
    serializedName: "HttpServer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HttpLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, embeddedCertData: {
                serializedName: "typeProperties.embeddedCertData",
                type: {
                    name: "Object"
                }
            }, certThumbprint: {
                serializedName: "typeProperties.certThumbprint",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureSearchLinkedService = {
    serializedName: "AzureSearch",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureSearchLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var CustomDataSourceLinkedService = {
    serializedName: "CustomDataSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "CustomDataSourceLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { typeProperties: {
                required: true,
                serializedName: "typeProperties",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AmazonRedshiftLinkedService = {
    serializedName: "AmazonRedshift",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AmazonRedshiftLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, database: {
                required: true,
                serializedName: "typeProperties.database",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AmazonS3LinkedService = {
    serializedName: "AmazonS3",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AmazonS3LinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "Object"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SapEccLinkedService = {
    serializedName: "SapEcc",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SapEccLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "String"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SapCloudForCustomerLinkedService = {
    serializedName: "SapCloudForCustomer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SapCloudForCustomerLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SalesforceLinkedService = {
    serializedName: "Salesforce",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SalesforceLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureDataLakeStoreLinkedService = {
    serializedName: "AzureDataLakeStore",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureDataLakeStoreLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { dataLakeStoreUri: {
                required: true,
                serializedName: "typeProperties.dataLakeStoreUri",
                type: {
                    name: "Object"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, accountName: {
                serializedName: "typeProperties.accountName",
                type: {
                    name: "Object"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "Object"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var MongoDbLinkedService = {
    serializedName: "MongoDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "MongoDbLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, databaseName: {
                required: true,
                serializedName: "typeProperties.databaseName",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authSource: {
                serializedName: "typeProperties.authSource",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "Object"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var CassandraLinkedService = {
    serializedName: "Cassandra",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "CassandraLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var WebLinkedServiceTypeProperties = {
    serializedName: "WebLinkedServiceTypeProperties",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "authenticationType",
            clientName: "authenticationType"
        },
        uberParent: "WebLinkedServiceTypeProperties",
        className: "WebLinkedServiceTypeProperties",
        modelProperties: {
            url: {
                required: true,
                serializedName: "url",
                type: {
                    name: "Object"
                }
            },
            authenticationType: {
                required: true,
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var WebClientCertificateAuthentication = {
    serializedName: "ClientCertificate",
    type: {
        name: "Composite",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        uberParent: "WebLinkedServiceTypeProperties",
        className: "WebClientCertificateAuthentication",
        modelProperties: tslib_1.__assign({}, WebLinkedServiceTypeProperties.type.modelProperties, { pfx: {
                required: true,
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, password: {
                required: true,
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export var WebBasicAuthentication = {
    serializedName: "Basic",
    type: {
        name: "Composite",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        uberParent: "WebLinkedServiceTypeProperties",
        className: "WebBasicAuthentication",
        modelProperties: tslib_1.__assign({}, WebLinkedServiceTypeProperties.type.modelProperties, { username: {
                required: true,
                serializedName: "username",
                type: {
                    name: "Object"
                }
            }, password: {
                required: true,
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export var WebAnonymousAuthentication = {
    serializedName: "Anonymous",
    type: {
        name: "Composite",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        uberParent: "WebLinkedServiceTypeProperties",
        className: "WebAnonymousAuthentication",
        modelProperties: tslib_1.__assign({}, WebLinkedServiceTypeProperties.type.modelProperties)
    }
};
export var WebLinkedService = {
    serializedName: "Web",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "WebLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { typeProperties: {
                required: true,
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "WebLinkedServiceTypeProperties"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ODataLinkedService = {
    serializedName: "OData",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "ODataLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HdfsLinkedService = {
    serializedName: "Hdfs",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HdfsLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var OdbcLinkedService = {
    serializedName: "Odbc",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "OdbcLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "Object"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureMLLinkedService = {
    serializedName: "AzureML",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureMLLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { mlEndpoint: {
                required: true,
                serializedName: "typeProperties.mlEndpoint",
                type: {
                    name: "Object"
                }
            }, apiKey: {
                required: true,
                serializedName: "typeProperties.apiKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, updateResourceEndpoint: {
                serializedName: "typeProperties.updateResourceEndpoint",
                type: {
                    name: "Object"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var TeradataLinkedService = {
    serializedName: "Teradata",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "TeradataLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var Db2LinkedService = {
    serializedName: "Db2",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "Db2LinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, database: {
                required: true,
                serializedName: "typeProperties.database",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SybaseLinkedService = {
    serializedName: "Sybase",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SybaseLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { server: {
                required: true,
                serializedName: "typeProperties.server",
                type: {
                    name: "Object"
                }
            }, database: {
                required: true,
                serializedName: "typeProperties.database",
                type: {
                    name: "Object"
                }
            }, schema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var PostgreSqlLinkedService = {
    serializedName: "PostgreSql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "PostgreSqlLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var MySqlLinkedService = {
    serializedName: "MySql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "MySqlLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureMySqlLinkedService = {
    serializedName: "AzureMySql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureMySqlLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var OracleLinkedService = {
    serializedName: "Oracle",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "OracleLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var FileServerLinkedService = {
    serializedName: "FileServer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "FileServerLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { host: {
                required: true,
                serializedName: "typeProperties.host",
                type: {
                    name: "Object"
                }
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var HDInsightLinkedService = {
    serializedName: "HDInsight",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "HDInsightLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { clusterUri: {
                required: true,
                serializedName: "typeProperties.clusterUri",
                type: {
                    name: "Object"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var DynamicsLinkedService = {
    serializedName: "Dynamics",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "DynamicsLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { deploymentType: {
                required: true,
                serializedName: "typeProperties.deploymentType",
                type: {
                    name: "Object"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "Object"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "Object"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "Object"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "Object"
                }
            }, authenticationType: {
                required: true,
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "Object"
                }
            }, username: {
                required: true,
                serializedName: "typeProperties.username",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var CosmosDbLinkedService = {
    serializedName: "CosmosDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "CosmosDbLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureKeyVaultLinkedService = {
    serializedName: "AzureKeyVault",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureKeyVaultLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { baseUrl: {
                required: true,
                serializedName: "typeProperties.baseUrl",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureBatchLinkedService = {
    serializedName: "AzureBatch",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureBatchLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { accountName: {
                required: true,
                serializedName: "typeProperties.accountName",
                type: {
                    name: "Object"
                }
            }, accessKey: {
                serializedName: "typeProperties.accessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, batchUri: {
                required: true,
                serializedName: "typeProperties.batchUri",
                type: {
                    name: "Object"
                }
            }, poolName: {
                required: true,
                serializedName: "typeProperties.poolName",
                type: {
                    name: "Object"
                }
            }, linkedServiceName: {
                required: true,
                serializedName: "typeProperties.linkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureSqlDatabaseLinkedService = {
    serializedName: "AzureSqlDatabase",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureSqlDatabaseLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var SqlServerLinkedService = {
    serializedName: "SqlServer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "SqlServerLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureSqlDWLinkedService = {
    serializedName: "AzureSqlDW",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureSqlDWLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                required: true,
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureTableStorageLinkedService = {
    serializedName: "AzureTableStorage",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureTableStorageLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "Object"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureBlobStorageLinkedService = {
    serializedName: "AzureBlobStorage",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureBlobStorageLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "Object"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "String"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "Object"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "Object"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var AzureStorageLinkedService = {
    serializedName: "AzureStorage",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        uberParent: "LinkedService",
        className: "AzureStorageLinkedService",
        modelProperties: tslib_1.__assign({}, LinkedService.type.modelProperties, { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "Object"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "Object"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: LinkedService.type.additionalProperties
    }
};
export var ResponsysObjectDataset = {
    serializedName: "ResponsysObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ResponsysObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SalesforceMarketingCloudObjectDataset = {
    serializedName: "SalesforceMarketingCloudObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SalesforceMarketingCloudObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var VerticaTableDataset = {
    serializedName: "VerticaTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "VerticaTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var NetezzaTableDataset = {
    serializedName: "NetezzaTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "NetezzaTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ZohoObjectDataset = {
    serializedName: "ZohoObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ZohoObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var XeroObjectDataset = {
    serializedName: "XeroObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "XeroObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SquareObjectDataset = {
    serializedName: "SquareObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SquareObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SparkObjectDataset = {
    serializedName: "SparkObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SparkObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ShopifyObjectDataset = {
    serializedName: "ShopifyObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ShopifyObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ServiceNowObjectDataset = {
    serializedName: "ServiceNowObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ServiceNowObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var QuickBooksObjectDataset = {
    serializedName: "QuickBooksObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "QuickBooksObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var PrestoObjectDataset = {
    serializedName: "PrestoObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "PrestoObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var PhoenixObjectDataset = {
    serializedName: "PhoenixObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "PhoenixObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var PaypalObjectDataset = {
    serializedName: "PaypalObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "PaypalObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var MarketoObjectDataset = {
    serializedName: "MarketoObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "MarketoObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var MariaDBTableDataset = {
    serializedName: "MariaDBTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "MariaDBTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var MagentoObjectDataset = {
    serializedName: "MagentoObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "MagentoObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var JiraObjectDataset = {
    serializedName: "JiraObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "JiraObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ImpalaObjectDataset = {
    serializedName: "ImpalaObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ImpalaObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var HubspotObjectDataset = {
    serializedName: "HubspotObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "HubspotObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var HiveObjectDataset = {
    serializedName: "HiveObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "HiveObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var HBaseObjectDataset = {
    serializedName: "HBaseObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "HBaseObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var GreenplumTableDataset = {
    serializedName: "GreenplumTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "GreenplumTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var GoogleBigQueryObjectDataset = {
    serializedName: "GoogleBigQueryObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "GoogleBigQueryObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var EloquaObjectDataset = {
    serializedName: "EloquaObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "EloquaObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var DrillTableDataset = {
    serializedName: "DrillTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "DrillTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var CouchbaseTableDataset = {
    serializedName: "CouchbaseTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "CouchbaseTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ConcurObjectDataset = {
    serializedName: "ConcurObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ConcurObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzurePostgreSqlTableDataset = {
    serializedName: "AzurePostgreSqlTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzurePostgreSqlTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AmazonMWSObjectDataset = {
    serializedName: "AmazonMWSObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AmazonMWSObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var DatasetCompression = {
    serializedName: "DatasetCompression",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "DatasetCompression",
        className: "DatasetCompression",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var DatasetZipDeflateCompression = {
    serializedName: "ZipDeflate",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
        uberParent: "DatasetCompression",
        className: "DatasetZipDeflateCompression",
        modelProperties: tslib_1.__assign({}, DatasetCompression.type.modelProperties, { level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: DatasetCompression.type.additionalProperties
    }
};
export var DatasetDeflateCompression = {
    serializedName: "Deflate",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
        uberParent: "DatasetCompression",
        className: "DatasetDeflateCompression",
        modelProperties: tslib_1.__assign({}, DatasetCompression.type.modelProperties, { level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: DatasetCompression.type.additionalProperties
    }
};
export var DatasetGZipCompression = {
    serializedName: "GZip",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
        uberParent: "DatasetCompression",
        className: "DatasetGZipCompression",
        modelProperties: tslib_1.__assign({}, DatasetCompression.type.modelProperties, { level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: DatasetCompression.type.additionalProperties
    }
};
export var DatasetBZip2Compression = {
    serializedName: "BZip2",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
        uberParent: "DatasetCompression",
        className: "DatasetBZip2Compression",
        modelProperties: tslib_1.__assign({}, DatasetCompression.type.modelProperties),
        additionalProperties: DatasetCompression.type.additionalProperties
    }
};
export var DatasetStorageFormat = {
    serializedName: "DatasetStorageFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "DatasetStorageFormat",
        className: "DatasetStorageFormat",
        modelProperties: {
            serializer: {
                serializedName: "serializer",
                type: {
                    name: "Object"
                }
            },
            deserializer: {
                serializedName: "deserializer",
                type: {
                    name: "Object"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ParquetFormat = {
    serializedName: "ParquetFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        uberParent: "DatasetStorageFormat",
        className: "ParquetFormat",
        modelProperties: tslib_1.__assign({}, DatasetStorageFormat.type.modelProperties),
        additionalProperties: DatasetStorageFormat.type.additionalProperties
    }
};
export var OrcFormat = {
    serializedName: "OrcFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        uberParent: "DatasetStorageFormat",
        className: "OrcFormat",
        modelProperties: tslib_1.__assign({}, DatasetStorageFormat.type.modelProperties),
        additionalProperties: DatasetStorageFormat.type.additionalProperties
    }
};
export var AvroFormat = {
    serializedName: "AvroFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        uberParent: "DatasetStorageFormat",
        className: "AvroFormat",
        modelProperties: tslib_1.__assign({}, DatasetStorageFormat.type.modelProperties),
        additionalProperties: DatasetStorageFormat.type.additionalProperties
    }
};
export var JsonFormat = {
    serializedName: "JsonFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        uberParent: "DatasetStorageFormat",
        className: "JsonFormat",
        modelProperties: tslib_1.__assign({}, DatasetStorageFormat.type.modelProperties, { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "String"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "Object"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "Object"
                }
            }, jsonNodeReference: {
                serializedName: "jsonNodeReference",
                type: {
                    name: "Object"
                }
            }, jsonPathDefinition: {
                serializedName: "jsonPathDefinition",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: DatasetStorageFormat.type.additionalProperties
    }
};
export var TextFormat = {
    serializedName: "TextFormat",
    type: {
        name: "Composite",
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        uberParent: "DatasetStorageFormat",
        className: "TextFormat",
        modelProperties: tslib_1.__assign({}, DatasetStorageFormat.type.modelProperties, { columnDelimiter: {
                serializedName: "columnDelimiter",
                type: {
                    name: "Object"
                }
            }, rowDelimiter: {
                serializedName: "rowDelimiter",
                type: {
                    name: "Object"
                }
            }, escapeChar: {
                serializedName: "escapeChar",
                type: {
                    name: "Object"
                }
            }, quoteChar: {
                serializedName: "quoteChar",
                type: {
                    name: "Object"
                }
            }, nullValue: {
                serializedName: "nullValue",
                type: {
                    name: "Object"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "Object"
                }
            }, treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "Object"
                }
            }, skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "Object"
                }
            }, firstRowAsHeader: {
                serializedName: "firstRowAsHeader",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: DatasetStorageFormat.type.additionalProperties
    }
};
export var HttpDataset = {
    serializedName: "HttpFile",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "HttpDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "Object"
                }
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "Object"
                }
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "Object"
                }
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "Object"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureSearchIndexDataset = {
    serializedName: "AzureSearchIndex",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureSearchIndexDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { indexName: {
                required: true,
                serializedName: "typeProperties.indexName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var WebTableDataset = {
    serializedName: "WebTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "WebTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { index: {
                required: true,
                serializedName: "typeProperties.index",
                type: {
                    name: "Object"
                }
            }, path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SqlServerTableDataset = {
    serializedName: "SqlServerTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SqlServerTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                required: true,
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SapEccResourceDataset = {
    serializedName: "SapEccResource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SapEccResourceDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { path: {
                required: true,
                serializedName: "typeProperties.path",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SapCloudForCustomerResourceDataset = {
    serializedName: "SapCloudForCustomerResource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SapCloudForCustomerResourceDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { path: {
                required: true,
                serializedName: "typeProperties.path",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var SalesforceObjectDataset = {
    serializedName: "SalesforceObject",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "SalesforceObjectDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var RelationalTableDataset = {
    serializedName: "RelationalTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "RelationalTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureMySqlTableDataset = {
    serializedName: "AzureMySqlTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureMySqlTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var OracleTableDataset = {
    serializedName: "OracleTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "OracleTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                required: true,
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ODataResourceDataset = {
    serializedName: "ODataResource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "ODataResourceDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var MongoDbCollectionDataset = {
    serializedName: "MongoDbCollection",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "MongoDbCollectionDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { collectionName: {
                required: true,
                serializedName: "typeProperties.collectionName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var FileShareDataset = {
    serializedName: "FileShare",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "FileShareDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "Object"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "Object"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, fileFilter: {
                serializedName: "typeProperties.fileFilter",
                type: {
                    name: "Object"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureDataLakeStoreDataset = {
    serializedName: "AzureDataLakeStoreFile",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureDataLakeStoreDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { folderPath: {
                required: true,
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "Object"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "Object"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var DynamicsEntityDataset = {
    serializedName: "DynamicsEntity",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "DynamicsEntityDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var DocumentDbCollectionDataset = {
    serializedName: "DocumentDbCollection",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "DocumentDbCollectionDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { collectionName: {
                required: true,
                serializedName: "typeProperties.collectionName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var CustomDataset = {
    serializedName: "CustomDataset",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "CustomDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { typeProperties: {
                required: true,
                serializedName: "typeProperties",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var CassandraTableDataset = {
    serializedName: "CassandraTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "CassandraTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            }, keyspace: {
                serializedName: "typeProperties.keyspace",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureSqlDWTableDataset = {
    serializedName: "AzureSqlDWTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureSqlDWTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                required: true,
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureSqlTableDataset = {
    serializedName: "AzureSqlTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureSqlTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                required: true,
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureTableDataset = {
    serializedName: "AzureTable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureTableDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { tableName: {
                required: true,
                serializedName: "typeProperties.tableName",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AzureBlobDataset = {
    serializedName: "AzureBlob",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AzureBlobDataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "Object"
                }
            }, tableRootLocation: {
                serializedName: "typeProperties.tableRootLocation",
                type: {
                    name: "Object"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "Object"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var AmazonS3Dataset = {
    serializedName: "AmazonS3Object",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        uberParent: "Dataset",
        className: "AmazonS3Dataset",
        modelProperties: tslib_1.__assign({}, Dataset.type.modelProperties, { bucketName: {
                required: true,
                serializedName: "typeProperties.bucketName",
                type: {
                    name: "Object"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "Object"
                }
            }, prefix: {
                serializedName: "typeProperties.prefix",
                type: {
                    name: "Object"
                }
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "Object"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Dataset.type.additionalProperties
    }
};
export var ActivityPolicy = {
    serializedName: "ActivityPolicy",
    type: {
        name: "Composite",
        className: "ActivityPolicy",
        modelProperties: {
            timeout: {
                serializedName: "timeout",
                type: {
                    name: "Object"
                }
            },
            retry: {
                serializedName: "retry",
                type: {
                    name: "Object"
                }
            },
            retryIntervalInSeconds: {
                serializedName: "retryIntervalInSeconds",
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                type: {
                    name: "Number"
                }
            },
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ExecutionActivity = {
    serializedName: "Execution",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "ExecutionActivity",
        modelProperties: tslib_1.__assign({}, Activity.type.modelProperties, { linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var DatabricksSparkPythonActivity = {
    serializedName: "DatabricksSparkPython",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "DatabricksSparkPythonActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { pythonFile: {
                required: true,
                serializedName: "typeProperties.pythonFile",
                type: {
                    name: "Object"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var DatabricksSparkJarActivity = {
    serializedName: "DatabricksSparkJar",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "DatabricksSparkJarActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { mainClassName: {
                required: true,
                serializedName: "typeProperties.mainClassName",
                type: {
                    name: "Object"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var DatabricksNotebookActivity = {
    serializedName: "DatabricksNotebook",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "DatabricksNotebookActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { notebookPath: {
                required: true,
                serializedName: "typeProperties.notebookPath",
                type: {
                    name: "Object"
                }
            }, baseParameters: {
                serializedName: "typeProperties.baseParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var DataLakeAnalyticsUSQLActivity = {
    serializedName: "DataLakeAnalyticsU-SQL",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "DataLakeAnalyticsUSQLActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { scriptPath: {
                required: true,
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "Object"
                }
            }, scriptLinkedService: {
                required: true,
                serializedName: "typeProperties.scriptLinkedService",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, degreeOfParallelism: {
                serializedName: "typeProperties.degreeOfParallelism",
                type: {
                    name: "Object"
                }
            }, priority: {
                serializedName: "typeProperties.priority",
                type: {
                    name: "Object"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, runtimeVersion: {
                serializedName: "typeProperties.runtimeVersion",
                type: {
                    name: "Object"
                }
            }, compilationMode: {
                serializedName: "typeProperties.compilationMode",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var AzureMLUpdateResourceActivity = {
    serializedName: "AzureMLUpdateResource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "AzureMLUpdateResourceActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { trainedModelName: {
                required: true,
                serializedName: "typeProperties.trainedModelName",
                type: {
                    name: "Object"
                }
            }, trainedModelLinkedServiceName: {
                required: true,
                serializedName: "typeProperties.trainedModelLinkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, trainedModelFilePath: {
                required: true,
                serializedName: "typeProperties.trainedModelFilePath",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var AzureMLWebServiceFile = {
    serializedName: "AzureMLWebServiceFile",
    type: {
        name: "Composite",
        className: "AzureMLWebServiceFile",
        modelProperties: {
            filePath: {
                required: true,
                serializedName: "filePath",
                type: {
                    name: "Object"
                }
            },
            linkedServiceName: {
                required: true,
                serializedName: "linkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }
        }
    }
};
export var AzureMLBatchExecutionActivity = {
    serializedName: "AzureMLBatchExecution",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "AzureMLBatchExecutionActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { globalParameters: {
                serializedName: "typeProperties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, webServiceOutputs: {
                serializedName: "typeProperties.webServiceOutputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "AzureMLWebServiceFile"
                        }
                    }
                }
            }, webServiceInputs: {
                serializedName: "typeProperties.webServiceInputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "AzureMLWebServiceFile"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var GetMetadataActivity = {
    serializedName: "GetMetadata",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "GetMetadataActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { dataset: {
                required: true,
                serializedName: "typeProperties.dataset",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, fieldList: {
                serializedName: "typeProperties.fieldList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var WebActivityAuthentication = {
    serializedName: "WebActivityAuthentication",
    type: {
        name: "Composite",
        className: "WebActivityAuthentication",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var WebActivity = {
    serializedName: "WebActivity",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "WebActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { method: {
                required: true,
                serializedName: "typeProperties.method",
                type: {
                    name: "String"
                }
            }, url: {
                required: true,
                serializedName: "typeProperties.url",
                type: {
                    name: "Object"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "Object"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "Object"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication"
                }
            }, datasets: {
                serializedName: "typeProperties.datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, linkedServices: {
                serializedName: "typeProperties.linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var RedshiftUnloadSettings = {
    serializedName: "RedshiftUnloadSettings",
    type: {
        name: "Composite",
        className: "RedshiftUnloadSettings",
        modelProperties: {
            s3LinkedServiceName: {
                required: true,
                serializedName: "s3LinkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            bucketName: {
                required: true,
                serializedName: "bucketName",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var CopySource = {
    serializedName: "CopySource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "CopySource",
        className: "CopySource",
        modelProperties: {
            sourceRetryCount: {
                serializedName: "sourceRetryCount",
                type: {
                    name: "Object"
                }
            },
            sourceRetryWait: {
                serializedName: "sourceRetryWait",
                type: {
                    name: "Object"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var AmazonRedshiftSource = {
    serializedName: "AmazonRedshiftSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AmazonRedshiftSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            }, redshiftUnloadSettings: {
                serializedName: "redshiftUnloadSettings",
                type: {
                    name: "Composite",
                    className: "RedshiftUnloadSettings"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ResponsysSource = {
    serializedName: "ResponsysSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ResponsysSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SalesforceMarketingCloudSource = {
    serializedName: "SalesforceMarketingCloudSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SalesforceMarketingCloudSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var VerticaSource = {
    serializedName: "VerticaSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "VerticaSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var NetezzaSource = {
    serializedName: "NetezzaSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "NetezzaSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ZohoSource = {
    serializedName: "ZohoSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ZohoSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var XeroSource = {
    serializedName: "XeroSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "XeroSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SquareSource = {
    serializedName: "SquareSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SquareSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SparkSource = {
    serializedName: "SparkSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SparkSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ShopifySource = {
    serializedName: "ShopifySource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ShopifySource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ServiceNowSource = {
    serializedName: "ServiceNowSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ServiceNowSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var QuickBooksSource = {
    serializedName: "QuickBooksSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "QuickBooksSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var PrestoSource = {
    serializedName: "PrestoSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "PrestoSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var PhoenixSource = {
    serializedName: "PhoenixSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "PhoenixSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var PaypalSource = {
    serializedName: "PaypalSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "PaypalSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var MarketoSource = {
    serializedName: "MarketoSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "MarketoSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var MariaDBSource = {
    serializedName: "MariaDBSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "MariaDBSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var MagentoSource = {
    serializedName: "MagentoSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "MagentoSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var JiraSource = {
    serializedName: "JiraSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "JiraSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ImpalaSource = {
    serializedName: "ImpalaSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ImpalaSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var HubspotSource = {
    serializedName: "HubspotSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "HubspotSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var HiveSource = {
    serializedName: "HiveSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "HiveSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var HBaseSource = {
    serializedName: "HBaseSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "HBaseSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var GreenplumSource = {
    serializedName: "GreenplumSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "GreenplumSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var GoogleBigQuerySource = {
    serializedName: "GoogleBigQuerySource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "GoogleBigQuerySource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var EloquaSource = {
    serializedName: "EloquaSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "EloquaSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var DrillSource = {
    serializedName: "DrillSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "DrillSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var CouchbaseSource = {
    serializedName: "CouchbaseSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "CouchbaseSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var ConcurSource = {
    serializedName: "ConcurSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "ConcurSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var AzurePostgreSqlSource = {
    serializedName: "AzurePostgreSqlSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AzurePostgreSqlSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var AmazonMWSSource = {
    serializedName: "AmazonMWSSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AmazonMWSSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var HttpSource = {
    serializedName: "HttpSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "HttpSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var AzureDataLakeStoreSource = {
    serializedName: "AzureDataLakeStoreSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AzureDataLakeStoreSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { recursive: {
                serializedName: "recursive",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var MongoDbSource = {
    serializedName: "MongoDbSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "MongoDbSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var CassandraSource = {
    serializedName: "CassandraSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "CassandraSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            }, consistencyLevel: {
                serializedName: "consistencyLevel",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var WebSource = {
    serializedName: "WebSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "WebSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var OracleSource = {
    serializedName: "OracleSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "OracleSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "Object"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var AzureMySqlSource = {
    serializedName: "AzureMySqlSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AzureMySqlSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var DistcpSettings = {
    serializedName: "DistcpSettings",
    type: {
        name: "Composite",
        className: "DistcpSettings",
        modelProperties: {
            resourceManagerEndpoint: {
                required: true,
                serializedName: "resourceManagerEndpoint",
                type: {
                    name: "Object"
                }
            },
            tempScriptPath: {
                required: true,
                serializedName: "tempScriptPath",
                type: {
                    name: "Object"
                }
            },
            distcpOptions: {
                serializedName: "distcpOptions",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var HdfsSource = {
    serializedName: "HdfsSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "HdfsSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { recursive: {
                serializedName: "recursive",
                type: {
                    name: "Object"
                }
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var FileSystemSource = {
    serializedName: "FileSystemSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "FileSystemSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { recursive: {
                serializedName: "recursive",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SqlDWSource = {
    serializedName: "SqlDWSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SqlDWSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "Object"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "Object"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var StoredProcedureParameter = {
    serializedName: "StoredProcedureParameter",
    type: {
        name: "Composite",
        className: "StoredProcedureParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Object"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SqlSource = {
    serializedName: "SqlSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SqlSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "Object"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "Object"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "StoredProcedureParameter"
                        }
                    }
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SapEccSource = {
    serializedName: "SapEccSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SapEccSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SapCloudForCustomerSource = {
    serializedName: "SapCloudForCustomerSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SapCloudForCustomerSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var SalesforceSource = {
    serializedName: "SalesforceSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "SalesforceSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var RelationalSource = {
    serializedName: "RelationalSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "RelationalSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var DynamicsSource = {
    serializedName: "DynamicsSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "DynamicsSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var DocumentDbCollectionSource = {
    serializedName: "DocumentDbCollectionSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "DocumentDbCollectionSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { query: {
                serializedName: "query",
                type: {
                    name: "Object"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var BlobSource = {
    serializedName: "BlobSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "BlobSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "Object"
                }
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "Object"
                }
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var AzureTableSource = {
    serializedName: "AzureTableSource",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        uberParent: "CopySource",
        className: "AzureTableSource",
        modelProperties: tslib_1.__assign({}, CopySource.type.modelProperties, { azureTableSourceQuery: {
                serializedName: "azureTableSourceQuery",
                type: {
                    name: "Object"
                }
            }, azureTableSourceIgnoreTableNotFound: {
                serializedName: "azureTableSourceIgnoreTableNotFound",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySource.type.additionalProperties
    }
};
export var LookupActivity = {
    serializedName: "Lookup",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "LookupActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { source: {
                required: true,
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, dataset: {
                required: true,
                serializedName: "typeProperties.dataset",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, firstRowOnly: {
                serializedName: "typeProperties.firstRowOnly",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var DeleteActivity = {
    serializedName: "Delete",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "DeleteActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { recursive: {
                serializedName: "typeProperties.recursive",
                type: {
                    name: "Object"
                }
            }, dataset: {
                required: true,
                serializedName: "typeProperties.dataset",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var SqlServerStoredProcedureActivity = {
    serializedName: "SqlServerStoredProcedure",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "SqlServerStoredProcedureActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { storedProcedureName: {
                required: true,
                serializedName: "typeProperties.storedProcedureName",
                type: {
                    name: "Object"
                }
            }, storedProcedureParameters: {
                serializedName: "typeProperties.storedProcedureParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "StoredProcedureParameter"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var CustomActivityReferenceObject = {
    serializedName: "CustomActivityReferenceObject",
    type: {
        name: "Composite",
        className: "CustomActivityReferenceObject",
        modelProperties: {
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }
        }
    }
};
export var CustomActivity = {
    serializedName: "Custom",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "CustomActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { command: {
                required: true,
                serializedName: "typeProperties.command",
                type: {
                    name: "Object"
                }
            }, resourceLinkedService: {
                serializedName: "typeProperties.resourceLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "Object"
                }
            }, referenceObjects: {
                serializedName: "typeProperties.referenceObjects",
                type: {
                    name: "Composite",
                    className: "CustomActivityReferenceObject"
                }
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var SSISPropertyOverride = {
    serializedName: "SSISPropertyOverride",
    type: {
        name: "Composite",
        className: "SSISPropertyOverride",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Object"
                }
            },
            isSensitive: {
                serializedName: "isSensitive",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var SSISExecutionParameter = {
    serializedName: "SSISExecutionParameter",
    type: {
        name: "Composite",
        className: "SSISExecutionParameter",
        modelProperties: {
            value: {
                required: true,
                serializedName: "value",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var SSISPackageLocation = {
    serializedName: "SSISPackageLocation",
    type: {
        name: "Composite",
        className: "SSISPackageLocation",
        modelProperties: {
            packagePath: {
                required: true,
                serializedName: "packagePath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ExecuteSSISPackageActivity = {
    serializedName: "ExecuteSSISPackage",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "ExecuteSSISPackageActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { packageLocation: {
                required: true,
                serializedName: "typeProperties.packageLocation",
                type: {
                    name: "Composite",
                    className: "SSISPackageLocation"
                }
            }, runtime: {
                serializedName: "typeProperties.runtime",
                type: {
                    name: "String"
                }
            }, loggingLevel: {
                serializedName: "typeProperties.loggingLevel",
                type: {
                    name: "String"
                }
            }, environmentPath: {
                serializedName: "typeProperties.environmentPath",
                type: {
                    name: "String"
                }
            }, connectVia: {
                required: true,
                serializedName: "typeProperties.connectVia",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, projectParameters: {
                serializedName: "typeProperties.projectParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "SSISExecutionParameter"
                        }
                    }
                }
            }, packageParameters: {
                serializedName: "typeProperties.packageParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "SSISExecutionParameter"
                        }
                    }
                }
            }, projectConnectionManagers: {
                serializedName: "typeProperties.projectConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Composite",
                                    className: "SSISExecutionParameter"
                                }
                            }
                        }
                    }
                }
            }, packageConnectionManagers: {
                serializedName: "typeProperties.packageConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Composite",
                                    className: "SSISExecutionParameter"
                                }
                            }
                        }
                    }
                }
            }, propertyOverrides: {
                serializedName: "typeProperties.propertyOverrides",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "SSISPropertyOverride"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var HDInsightSparkActivity = {
    serializedName: "HDInsightSpark",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "HDInsightSparkActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { rootPath: {
                required: true,
                serializedName: "typeProperties.rootPath",
                type: {
                    name: "Object"
                }
            }, entryFilePath: {
                required: true,
                serializedName: "typeProperties.entryFilePath",
                type: {
                    name: "Object"
                }
            }, argumentsProperty: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, sparkJobLinkedService: {
                serializedName: "typeProperties.sparkJobLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "String"
                }
            }, proxyUser: {
                serializedName: "typeProperties.proxyUser",
                type: {
                    name: "Object"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var HDInsightStreamingActivity = {
    serializedName: "HDInsightStreaming",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "HDInsightStreamingActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, argumentsProperty: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, mapper: {
                required: true,
                serializedName: "typeProperties.mapper",
                type: {
                    name: "Object"
                }
            }, reducer: {
                required: true,
                serializedName: "typeProperties.reducer",
                type: {
                    name: "Object"
                }
            }, input: {
                required: true,
                serializedName: "typeProperties.input",
                type: {
                    name: "Object"
                }
            }, output: {
                required: true,
                serializedName: "typeProperties.output",
                type: {
                    name: "Object"
                }
            }, filePaths: {
                required: true,
                serializedName: "typeProperties.filePaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, fileLinkedService: {
                serializedName: "typeProperties.fileLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, combiner: {
                serializedName: "typeProperties.combiner",
                type: {
                    name: "Object"
                }
            }, commandEnvironment: {
                serializedName: "typeProperties.commandEnvironment",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var HDInsightMapReduceActivity = {
    serializedName: "HDInsightMapReduce",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "HDInsightMapReduceActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, argumentsProperty: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, className: {
                required: true,
                serializedName: "typeProperties.className",
                type: {
                    name: "Object"
                }
            }, jarFilePath: {
                required: true,
                serializedName: "typeProperties.jarFilePath",
                type: {
                    name: "Object"
                }
            }, jarLinkedService: {
                serializedName: "typeProperties.jarLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, jarLibs: {
                serializedName: "typeProperties.jarLibs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var HDInsightPigActivity = {
    serializedName: "HDInsightPig",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "HDInsightPigActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, argumentsProperty: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "Object"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var HDInsightHiveActivity = {
    serializedName: "HDInsightHive",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "HDInsightHiveActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, argumentsProperty: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "Object"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var RedirectIncompatibleRowSettings = {
    serializedName: "RedirectIncompatibleRowSettings",
    type: {
        name: "Composite",
        className: "RedirectIncompatibleRowSettings",
        modelProperties: {
            linkedServiceName: {
                required: true,
                serializedName: "linkedServiceName",
                type: {
                    name: "Object"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "Object"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var StagingSettings = {
    serializedName: "StagingSettings",
    type: {
        name: "Composite",
        className: "StagingSettings",
        modelProperties: {
            linkedServiceName: {
                required: true,
                serializedName: "linkedServiceName",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "Object"
                }
            },
            enableCompression: {
                serializedName: "enableCompression",
                type: {
                    name: "Object"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var CopyTranslator = {
    serializedName: "CopyTranslator",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "CopyTranslator",
        className: "CopyTranslator",
        modelProperties: {
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var TabularTranslator = {
    serializedName: "TabularTranslator",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopyTranslator.type.polymorphicDiscriminator,
        uberParent: "CopyTranslator",
        className: "TabularTranslator",
        modelProperties: tslib_1.__assign({}, CopyTranslator.type.modelProperties, { columnMappings: {
                serializedName: "columnMappings",
                type: {
                    name: "Object"
                }
            }, schemaMapping: {
                serializedName: "schemaMapping",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopyTranslator.type.additionalProperties
    }
};
export var CopySink = {
    serializedName: "CopySink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "CopySink",
        className: "CopySink",
        modelProperties: {
            writeBatchSize: {
                serializedName: "writeBatchSize",
                type: {
                    name: "Object"
                }
            },
            writeBatchTimeout: {
                serializedName: "writeBatchTimeout",
                type: {
                    name: "Object"
                }
            },
            sinkRetryCount: {
                serializedName: "sinkRetryCount",
                type: {
                    name: "Object"
                }
            },
            sinkRetryWait: {
                serializedName: "sinkRetryWait",
                type: {
                    name: "Object"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var SalesforceSink = {
    serializedName: "SalesforceSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "SalesforceSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "Object"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var DynamicsSink = {
    serializedName: "DynamicsSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "DynamicsSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { writeBehavior: {
                required: true,
                isConstant: true,
                serializedName: "writeBehavior",
                defaultValue: 'Upsert',
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var OdbcSink = {
    serializedName: "OdbcSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "OdbcSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var AzureSearchIndexSink = {
    serializedName: "AzureSearchIndexSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "AzureSearchIndexSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var AzureDataLakeStoreSink = {
    serializedName: "AzureDataLakeStoreSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "AzureDataLakeStoreSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var OracleSink = {
    serializedName: "OracleSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "OracleSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var PolybaseSettings = {
    serializedName: "PolybaseSettings",
    type: {
        name: "Composite",
        className: "PolybaseSettings",
        modelProperties: {
            rejectType: {
                serializedName: "rejectType",
                type: {
                    name: "String"
                }
            },
            rejectValue: {
                serializedName: "rejectValue",
                type: {
                    name: "Object"
                }
            },
            rejectSampleValue: {
                serializedName: "rejectSampleValue",
                type: {
                    name: "Object"
                }
            },
            useTypeDefault: {
                serializedName: "useTypeDefault",
                type: {
                    name: "Object"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var SqlDWSink = {
    serializedName: "SqlDWSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "SqlDWSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "Object"
                }
            }, allowPolyBase: {
                serializedName: "allowPolyBase",
                type: {
                    name: "Object"
                }
            }, polyBaseSettings: {
                serializedName: "polyBaseSettings",
                type: {
                    name: "Composite",
                    className: "PolybaseSettings",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var SqlSink = {
    serializedName: "SqlSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "SqlSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "Object"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "Object"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "Object"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "StoredProcedureParameter"
                        }
                    }
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var DocumentDbCollectionSink = {
    serializedName: "DocumentDbCollectionSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "DocumentDbCollectionSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var FileSystemSink = {
    serializedName: "FileSystemSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "FileSystemSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var BlobSink = {
    serializedName: "BlobSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "BlobSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { blobWriterOverwriteFiles: {
                serializedName: "blobWriterOverwriteFiles",
                type: {
                    name: "Object"
                }
            }, blobWriterDateTimeFormat: {
                serializedName: "blobWriterDateTimeFormat",
                type: {
                    name: "Object"
                }
            }, blobWriterAddHeader: {
                serializedName: "blobWriterAddHeader",
                type: {
                    name: "Object"
                }
            }, copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var AzureTableSink = {
    serializedName: "AzureTableSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "AzureTableSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { azureTableDefaultPartitionKeyValue: {
                serializedName: "azureTableDefaultPartitionKeyValue",
                type: {
                    name: "Object"
                }
            }, azureTablePartitionKeyName: {
                serializedName: "azureTablePartitionKeyName",
                type: {
                    name: "Object"
                }
            }, azureTableRowKeyName: {
                serializedName: "azureTableRowKeyName",
                type: {
                    name: "Object"
                }
            }, azureTableInsertType: {
                serializedName: "azureTableInsertType",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var AzureQueueSink = {
    serializedName: "AzureQueueSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "AzureQueueSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var SapCloudForCustomerSink = {
    serializedName: "SapCloudForCustomerSink",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        uberParent: "CopySink",
        className: "SapCloudForCustomerSink",
        modelProperties: tslib_1.__assign({}, CopySink.type.modelProperties, { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            } }),
        additionalProperties: CopySink.type.additionalProperties
    }
};
export var CopyActivity = {
    serializedName: "Copy",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "CopyActivity",
        modelProperties: tslib_1.__assign({}, ExecutionActivity.type.modelProperties, { source: {
                required: true,
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, sink: {
                required: true,
                serializedName: "typeProperties.sink",
                type: {
                    name: "Composite",
                    className: "CopySink",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, translator: {
                serializedName: "typeProperties.translator",
                type: {
                    name: "Composite",
                    className: "CopyTranslator",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, enableStaging: {
                serializedName: "typeProperties.enableStaging",
                type: {
                    name: "Object"
                }
            }, stagingSettings: {
                serializedName: "typeProperties.stagingSettings",
                type: {
                    name: "Composite",
                    className: "StagingSettings",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, parallelCopies: {
                serializedName: "typeProperties.parallelCopies",
                type: {
                    name: "Object"
                }
            }, dataIntegrationUnits: {
                serializedName: "typeProperties.dataIntegrationUnits",
                type: {
                    name: "Object"
                }
            }, enableSkipIncompatibleRow: {
                serializedName: "typeProperties.enableSkipIncompatibleRow",
                type: {
                    name: "Object"
                }
            }, redirectIncompatibleRowSettings: {
                serializedName: "typeProperties.redirectIncompatibleRowSettings",
                type: {
                    name: "Composite",
                    className: "RedirectIncompatibleRowSettings",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, outputs: {
                serializedName: "outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var ControlActivity = {
    serializedName: "Container",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "ControlActivity",
        modelProperties: tslib_1.__assign({}, Activity.type.modelProperties),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var AppendVariableActivity = {
    serializedName: "AppendVariable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "AppendVariableActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var SetVariableActivity = {
    serializedName: "SetVariable",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "SetVariableActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "Object"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var FilterActivity = {
    serializedName: "Filter",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "FilterActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { items: {
                required: true,
                serializedName: "typeProperties.items",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, condition: {
                required: true,
                serializedName: "typeProperties.condition",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var UntilActivity = {
    serializedName: "Until",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "UntilActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { expression: {
                required: true,
                serializedName: "typeProperties.expression",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "Object"
                }
            }, activities: {
                required: true,
                serializedName: "typeProperties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var WaitActivity = {
    serializedName: "Wait",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "WaitActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { waitTimeInSeconds: {
                required: true,
                serializedName: "typeProperties.waitTimeInSeconds",
                type: {
                    name: "Number"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var ForEachActivity = {
    serializedName: "ForEach",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "ForEachActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { isSequential: {
                serializedName: "typeProperties.isSequential",
                type: {
                    name: "Boolean"
                }
            }, batchCount: {
                serializedName: "typeProperties.batchCount",
                constraints: {
                    InclusiveMaximum: 50
                },
                type: {
                    name: "Number"
                }
            }, items: {
                required: true,
                serializedName: "typeProperties.items",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, activities: {
                required: true,
                serializedName: "typeProperties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var IfConditionActivity = {
    serializedName: "IfCondition",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "IfConditionActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { expression: {
                required: true,
                serializedName: "typeProperties.expression",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, ifTrueActivities: {
                serializedName: "typeProperties.ifTrueActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }, ifFalseActivities: {
                serializedName: "typeProperties.ifFalseActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var ExecutePipelineActivity = {
    serializedName: "ExecutePipeline",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        uberParent: "Activity",
        className: "ExecutePipelineActivity",
        modelProperties: tslib_1.__assign({}, ControlActivity.type.modelProperties, { pipelineProperty: {
                required: true,
                serializedName: "typeProperties.pipeline",
                defaultValue: {},
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, waitOnCompletion: {
                serializedName: "typeProperties.waitOnCompletion",
                type: {
                    name: "Boolean"
                }
            } }),
        additionalProperties: Activity.type.additionalProperties
    }
};
export var LinkedIntegrationRuntime = {
    serializedName: "LinkedIntegrationRuntime",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntime",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                readOnly: true,
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                readOnly: true,
                serializedName: "dataFactoryName",
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                readOnly: true,
                serializedName: "dataFactoryLocation",
                type: {
                    name: "String"
                }
            },
            createTime: {
                readOnly: true,
                serializedName: "createTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export var SelfHostedIntegrationRuntimeNode = {
    serializedName: "SelfHostedIntegrationRuntimeNode",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntimeNode",
        modelProperties: {
            nodeName: {
                readOnly: true,
                serializedName: "nodeName",
                type: {
                    name: "String"
                }
            },
            machineName: {
                readOnly: true,
                serializedName: "machineName",
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                readOnly: true,
                serializedName: "hostServiceUri",
                type: {
                    name: "String"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            capabilities: {
                readOnly: true,
                serializedName: "capabilities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            versionStatus: {
                readOnly: true,
                serializedName: "versionStatus",
                type: {
                    name: "String"
                }
            },
            version: {
                readOnly: true,
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            registerTime: {
                readOnly: true,
                serializedName: "registerTime",
                type: {
                    name: "DateTime"
                }
            },
            lastConnectTime: {
                readOnly: true,
                serializedName: "lastConnectTime",
                type: {
                    name: "DateTime"
                }
            },
            expiryTime: {
                readOnly: true,
                serializedName: "expiryTime",
                type: {
                    name: "DateTime"
                }
            },
            lastStartTime: {
                readOnly: true,
                serializedName: "lastStartTime",
                type: {
                    name: "DateTime"
                }
            },
            lastStopTime: {
                readOnly: true,
                serializedName: "lastStopTime",
                type: {
                    name: "DateTime"
                }
            },
            lastUpdateResult: {
                readOnly: true,
                serializedName: "lastUpdateResult",
                type: {
                    name: "String"
                }
            },
            lastStartUpdateTime: {
                readOnly: true,
                serializedName: "lastStartUpdateTime",
                type: {
                    name: "DateTime"
                }
            },
            lastEndUpdateTime: {
                readOnly: true,
                serializedName: "lastEndUpdateTime",
                type: {
                    name: "DateTime"
                }
            },
            isActiveDispatcher: {
                readOnly: true,
                serializedName: "isActiveDispatcher",
                type: {
                    name: "Boolean"
                }
            },
            concurrentJobsLimit: {
                readOnly: true,
                serializedName: "concurrentJobsLimit",
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                readOnly: true,
                serializedName: "maxConcurrentJobs",
                type: {
                    name: "Number"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var SelfHostedIntegrationRuntimeStatus = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        uberParent: "IntegrationRuntimeStatus",
        className: "SelfHostedIntegrationRuntimeStatus",
        modelProperties: tslib_1.__assign({}, IntegrationRuntimeStatus.type.modelProperties, { createTime: {
                readOnly: true,
                serializedName: "typeProperties.createTime",
                type: {
                    name: "DateTime"
                }
            }, taskQueueId: {
                readOnly: true,
                serializedName: "typeProperties.taskQueueId",
                type: {
                    name: "String"
                }
            }, internalChannelEncryption: {
                readOnly: true,
                serializedName: "typeProperties.internalChannelEncryption",
                type: {
                    name: "String"
                }
            }, version: {
                readOnly: true,
                serializedName: "typeProperties.version",
                type: {
                    name: "String"
                }
            }, nodes: {
                serializedName: "typeProperties.nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SelfHostedIntegrationRuntimeNode",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }, scheduledUpdateDate: {
                readOnly: true,
                serializedName: "typeProperties.scheduledUpdateDate",
                type: {
                    name: "DateTime"
                }
            }, updateDelayOffset: {
                readOnly: true,
                serializedName: "typeProperties.updateDelayOffset",
                type: {
                    name: "String"
                }
            }, localTimeZoneOffset: {
                readOnly: true,
                serializedName: "typeProperties.localTimeZoneOffset",
                type: {
                    name: "String"
                }
            }, capabilities: {
                readOnly: true,
                serializedName: "typeProperties.capabilities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, serviceUrls: {
                readOnly: true,
                serializedName: "typeProperties.serviceUrls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, autoUpdate: {
                readOnly: true,
                serializedName: "typeProperties.autoUpdate",
                type: {
                    name: "String"
                }
            }, versionStatus: {
                readOnly: true,
                serializedName: "typeProperties.versionStatus",
                type: {
                    name: "String"
                }
            }, links: {
                serializedName: "typeProperties.links",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedIntegrationRuntime"
                        }
                    }
                }
            }, pushedVersion: {
                readOnly: true,
                serializedName: "typeProperties.pushedVersion",
                type: {
                    name: "String"
                }
            }, latestVersion: {
                readOnly: true,
                serializedName: "typeProperties.latestVersion",
                type: {
                    name: "String"
                }
            }, autoUpdateETA: {
                readOnly: true,
                serializedName: "typeProperties.autoUpdateETA",
                type: {
                    name: "DateTime"
                }
            } }),
        additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
    }
};
export var ManagedIntegrationRuntimeOperationResult = {
    serializedName: "ManagedIntegrationRuntimeOperationResult",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeOperationResult",
        modelProperties: {
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            startTime: {
                readOnly: true,
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            result: {
                readOnly: true,
                serializedName: "result",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                readOnly: true,
                serializedName: "errorCode",
                type: {
                    name: "String"
                }
            },
            parameters: {
                readOnly: true,
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            activityId: {
                readOnly: true,
                serializedName: "activityId",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ManagedIntegrationRuntimeError = {
    serializedName: "ManagedIntegrationRuntimeError",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeError",
        modelProperties: {
            time: {
                readOnly: true,
                serializedName: "time",
                type: {
                    name: "DateTime"
                }
            },
            code: {
                readOnly: true,
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            parameters: {
                readOnly: true,
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ManagedIntegrationRuntimeNode = {
    serializedName: "ManagedIntegrationRuntimeNode",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeNode",
        modelProperties: {
            nodeId: {
                readOnly: true,
                serializedName: "nodeId",
                type: {
                    name: "String"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ManagedIntegrationRuntimeStatus = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        uberParent: "IntegrationRuntimeStatus",
        className: "ManagedIntegrationRuntimeStatus",
        modelProperties: tslib_1.__assign({}, IntegrationRuntimeStatus.type.modelProperties, { createTime: {
                readOnly: true,
                serializedName: "typeProperties.createTime",
                type: {
                    name: "DateTime"
                }
            }, nodes: {
                readOnly: true,
                serializedName: "typeProperties.nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeNode",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }, otherErrors: {
                readOnly: true,
                serializedName: "typeProperties.otherErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }, lastOperation: {
                readOnly: true,
                serializedName: "typeProperties.lastOperation",
                type: {
                    name: "Composite",
                    className: "ManagedIntegrationRuntimeOperationResult",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
    }
};
export var LinkedIntegrationRuntimeType = {
    serializedName: "LinkedIntegrationRuntimeType",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "authorizationType",
            clientName: "authorizationType"
        },
        uberParent: "LinkedIntegrationRuntimeType",
        className: "LinkedIntegrationRuntimeType",
        modelProperties: {
            authorizationType: {
                required: true,
                serializedName: "authorizationType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var LinkedIntegrationRuntimeRbacAuthorization = {
    serializedName: "RBAC",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        uberParent: "LinkedIntegrationRuntimeType",
        className: "LinkedIntegrationRuntimeRbacAuthorization",
        modelProperties: tslib_1.__assign({}, LinkedIntegrationRuntimeType.type.modelProperties, { resourceId: {
                required: true,
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
export var LinkedIntegrationRuntimeKeyAuthorization = {
    serializedName: "Key",
    type: {
        name: "Composite",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        uberParent: "LinkedIntegrationRuntimeType",
        className: "LinkedIntegrationRuntimeKeyAuthorization",
        modelProperties: tslib_1.__assign({}, LinkedIntegrationRuntimeType.type.modelProperties, { key: {
                required: true,
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            } })
    }
};
export var SelfHostedIntegrationRuntime = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        uberParent: "IntegrationRuntime",
        className: "SelfHostedIntegrationRuntime",
        modelProperties: tslib_1.__assign({}, IntegrationRuntime.type.modelProperties, { linkedInfo: {
                serializedName: "typeProperties.linkedInfo",
                type: {
                    name: "Composite",
                    className: "LinkedIntegrationRuntimeType"
                }
            } }),
        additionalProperties: IntegrationRuntime.type.additionalProperties
    }
};
export var IntegrationRuntimeCustomSetupScriptProperties = {
    serializedName: "IntegrationRuntimeCustomSetupScriptProperties",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomSetupScriptProperties",
        modelProperties: {
            blobContainerUri: {
                serializedName: "blobContainerUri",
                type: {
                    name: "String"
                }
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            }
        }
    }
};
export var IntegrationRuntimeSsisCatalogInfo = {
    serializedName: "IntegrationRuntimeSsisCatalogInfo",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisCatalogInfo",
        modelProperties: {
            catalogServerEndpoint: {
                serializedName: "catalogServerEndpoint",
                type: {
                    name: "String"
                }
            },
            catalogAdminUserName: {
                serializedName: "catalogAdminUserName",
                constraints: {
                    MaxLength: 128,
                    MinLength: 1
                },
                type: {
                    name: "String"
                }
            },
            catalogAdminPassword: {
                serializedName: "catalogAdminPassword",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            },
            catalogPricingTier: {
                serializedName: "catalogPricingTier",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeSsisProperties = {
    serializedName: "IntegrationRuntimeSsisProperties",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisProperties",
        modelProperties: {
            catalogInfo: {
                serializedName: "catalogInfo",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisCatalogInfo",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            },
            licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String"
                }
            },
            customSetupScriptProperties: {
                serializedName: "customSetupScriptProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomSetupScriptProperties"
                }
            },
            edition: {
                serializedName: "edition",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeVNetProperties = {
    serializedName: "IntegrationRuntimeVNetProperties",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeVNetProperties",
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                type: {
                    name: "String"
                }
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeComputeProperties = {
    serializedName: "IntegrationRuntimeComputeProperties",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeComputeProperties",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            nodeSize: {
                serializedName: "nodeSize",
                type: {
                    name: "String"
                }
            },
            numberOfNodes: {
                serializedName: "numberOfNodes",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            maxParallelExecutionsPerNode: {
                serializedName: "maxParallelExecutionsPerNode",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            vNetProperties: {
                serializedName: "vNetProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeVNetProperties",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var ManagedIntegrationRuntime = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        uberParent: "IntegrationRuntime",
        className: "ManagedIntegrationRuntime",
        modelProperties: tslib_1.__assign({}, IntegrationRuntime.type.modelProperties, { state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, computeProperties: {
                serializedName: "typeProperties.computeProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeComputeProperties",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }, ssisProperties: {
                serializedName: "typeProperties.ssisProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisProperties",
                    additionalProperties: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            } }),
        additionalProperties: IntegrationRuntime.type.additionalProperties
    }
};
export var IntegrationRuntimeNodeIpAddress = {
    serializedName: "IntegrationRuntimeNodeIpAddress",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeIpAddress",
        modelProperties: {
            ipAddress: {
                readOnly: true,
                serializedName: "ipAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var IntegrationRuntimeNodeMonitoringData = {
    serializedName: "IntegrationRuntimeNodeMonitoringData",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeMonitoringData",
        modelProperties: {
            nodeName: {
                readOnly: true,
                serializedName: "nodeName",
                type: {
                    name: "String"
                }
            },
            availableMemoryInMB: {
                readOnly: true,
                serializedName: "availableMemoryInMB",
                type: {
                    name: "Number"
                }
            },
            cpuUtilization: {
                readOnly: true,
                serializedName: "cpuUtilization",
                type: {
                    name: "Number"
                }
            },
            concurrentJobsLimit: {
                readOnly: true,
                serializedName: "concurrentJobsLimit",
                type: {
                    name: "Number"
                }
            },
            concurrentJobsRunning: {
                readOnly: true,
                serializedName: "concurrentJobsRunning",
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                readOnly: true,
                serializedName: "maxConcurrentJobs",
                type: {
                    name: "Number"
                }
            },
            sentBytes: {
                readOnly: true,
                serializedName: "sentBytes",
                type: {
                    name: "Number"
                }
            },
            receivedBytes: {
                readOnly: true,
                serializedName: "receivedBytes",
                type: {
                    name: "Number"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var IntegrationRuntimeMonitoringData = {
    serializedName: "IntegrationRuntimeMonitoringData",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeMonitoringData",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            nodes: {
                serializedName: "nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeNodeMonitoringData",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
export var IntegrationRuntimeAuthKeys = {
    serializedName: "IntegrationRuntimeAuthKeys",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeAuthKeys",
        modelProperties: {
            authKey1: {
                serializedName: "authKey1",
                type: {
                    name: "String"
                }
            },
            authKey2: {
                serializedName: "authKey2",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var IntegrationRuntimeRegenerateKeyParameters = {
    serializedName: "IntegrationRuntimeRegenerateKeyParameters",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeRegenerateKeyParameters",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var IntegrationRuntimeConnectionInfo = {
    serializedName: "IntegrationRuntimeConnectionInfo",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeConnectionInfo",
        modelProperties: {
            serviceToken: {
                readOnly: true,
                serializedName: "serviceToken",
                type: {
                    name: "String"
                }
            },
            identityCertThumbprint: {
                readOnly: true,
                serializedName: "identityCertThumbprint",
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                readOnly: true,
                serializedName: "hostServiceUri",
                type: {
                    name: "String"
                }
            },
            version: {
                readOnly: true,
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            publicKey: {
                readOnly: true,
                serializedName: "publicKey",
                type: {
                    name: "String"
                }
            },
            isIdentityCertExprired: {
                readOnly: true,
                serializedName: "isIdentityCertExprired",
                type: {
                    name: "Boolean"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var OperationListResponse = {
    serializedName: "OperationListResponse",
    type: {
        name: "Composite",
        className: "OperationListResponse",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var FactoryListResponse = {
    serializedName: "FactoryListResponse",
    type: {
        name: "Composite",
        className: "FactoryListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Factory",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var IntegrationRuntimeListResponse = {
    serializedName: "IntegrationRuntimeListResponse",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var LinkedServiceListResponse = {
    serializedName: "LinkedServiceListResponse",
    type: {
        name: "Composite",
        className: "LinkedServiceListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DatasetListResponse = {
    serializedName: "DatasetListResponse",
    type: {
        name: "Composite",
        className: "DatasetListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var PipelineListResponse = {
    serializedName: "PipelineListResponse",
    type: {
        name: "Composite",
        className: "PipelineListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineResource",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TriggerListResponse = {
    serializedName: "TriggerListResponse",
    type: {
        name: "Composite",
        className: "TriggerListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var RerunTriggerListResponse = {
    serializedName: "RerunTriggerListResponse",
    type: {
        name: "Composite",
        className: "RerunTriggerListResponse",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RerunTriggerResource"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var discriminators = {
    'SecretBase.SecureString': SecureString,
    'SecretBase.AzureKeyVaultSecret': AzureKeyVaultSecretReference,
    'SecretBase': SecretBase,
    'FactoryRepoConfiguration': FactoryRepoConfiguration,
    'IntegrationRuntime': IntegrationRuntime,
    'IntegrationRuntimeStatus': IntegrationRuntimeStatus,
    'LinkedService': LinkedService,
    'Dataset': Dataset,
    'Activity': Activity,
    'Trigger': Trigger,
    'FactoryRepoConfiguration.FactoryVSTSConfiguration': FactoryVSTSConfiguration,
    'FactoryRepoConfiguration.FactoryGitHubConfiguration': FactoryGitHubConfiguration,
    'Trigger.RerunTumblingWindowTrigger': RerunTumblingWindowTrigger,
    'DependencyReference.SelfDependencyTumblingWindowTriggerReference': SelfDependencyTumblingWindowTriggerReference,
    'DependencyReference.TumblingWindowTriggerDependencyReference': TumblingWindowTriggerDependencyReference,
    'DependencyReference.TriggerDependencyReference': TriggerDependencyReference,
    'DependencyReference': DependencyReference,
    'Trigger.TumblingWindowTrigger': TumblingWindowTrigger,
    'Trigger.BlobEventsTrigger': BlobEventsTrigger,
    'Trigger.BlobTrigger': BlobTrigger,
    'Trigger.ScheduleTrigger': ScheduleTrigger,
    'Trigger.MultiplePipelineTrigger': MultiplePipelineTrigger,
    'LinkedService.Responsys': ResponsysLinkedService,
    'LinkedService.AzureDatabricks': AzureDatabricksLinkedService,
    'LinkedService.AzureDataLakeAnalytics': AzureDataLakeAnalyticsLinkedService,
    'LinkedService.HDInsightOnDemand': HDInsightOnDemandLinkedService,
    'LinkedService.SalesforceMarketingCloud': SalesforceMarketingCloudLinkedService,
    'LinkedService.Netezza': NetezzaLinkedService,
    'LinkedService.Vertica': VerticaLinkedService,
    'LinkedService.Zoho': ZohoLinkedService,
    'LinkedService.Xero': XeroLinkedService,
    'LinkedService.Square': SquareLinkedService,
    'LinkedService.Spark': SparkLinkedService,
    'LinkedService.Shopify': ShopifyLinkedService,
    'LinkedService.ServiceNow': ServiceNowLinkedService,
    'LinkedService.QuickBooks': QuickBooksLinkedService,
    'LinkedService.Presto': PrestoLinkedService,
    'LinkedService.Phoenix': PhoenixLinkedService,
    'LinkedService.Paypal': PaypalLinkedService,
    'LinkedService.Marketo': MarketoLinkedService,
    'LinkedService.MariaDB': MariaDBLinkedService,
    'LinkedService.Magento': MagentoLinkedService,
    'LinkedService.Jira': JiraLinkedService,
    'LinkedService.Impala': ImpalaLinkedService,
    'LinkedService.Hubspot': HubspotLinkedService,
    'LinkedService.Hive': HiveLinkedService,
    'LinkedService.HBase': HBaseLinkedService,
    'LinkedService.Greenplum': GreenplumLinkedService,
    'LinkedService.GoogleBigQuery': GoogleBigQueryLinkedService,
    'LinkedService.Eloqua': EloquaLinkedService,
    'LinkedService.Drill': DrillLinkedService,
    'LinkedService.Couchbase': CouchbaseLinkedService,
    'LinkedService.Concur': ConcurLinkedService,
    'LinkedService.AzurePostgreSql': AzurePostgreSqlLinkedService,
    'LinkedService.AmazonMWS': AmazonMWSLinkedService,
    'LinkedService.SapHana': SapHanaLinkedService,
    'LinkedService.SapBW': SapBWLinkedService,
    'LinkedService.Sftp': SftpServerLinkedService,
    'LinkedService.FtpServer': FtpServerLinkedService,
    'LinkedService.HttpServer': HttpLinkedService,
    'LinkedService.AzureSearch': AzureSearchLinkedService,
    'LinkedService.CustomDataSource': CustomDataSourceLinkedService,
    'LinkedService.AmazonRedshift': AmazonRedshiftLinkedService,
    'LinkedService.AmazonS3': AmazonS3LinkedService,
    'LinkedService.SapEcc': SapEccLinkedService,
    'LinkedService.SapCloudForCustomer': SapCloudForCustomerLinkedService,
    'LinkedService.Salesforce': SalesforceLinkedService,
    'LinkedService.AzureDataLakeStore': AzureDataLakeStoreLinkedService,
    'LinkedService.MongoDb': MongoDbLinkedService,
    'LinkedService.Cassandra': CassandraLinkedService,
    'WebLinkedServiceTypeProperties.ClientCertificate': WebClientCertificateAuthentication,
    'WebLinkedServiceTypeProperties.Basic': WebBasicAuthentication,
    'WebLinkedServiceTypeProperties.Anonymous': WebAnonymousAuthentication,
    'WebLinkedServiceTypeProperties': WebLinkedServiceTypeProperties,
    'LinkedService.Web': WebLinkedService,
    'LinkedService.OData': ODataLinkedService,
    'LinkedService.Hdfs': HdfsLinkedService,
    'LinkedService.Odbc': OdbcLinkedService,
    'LinkedService.AzureML': AzureMLLinkedService,
    'LinkedService.Teradata': TeradataLinkedService,
    'LinkedService.Db2': Db2LinkedService,
    'LinkedService.Sybase': SybaseLinkedService,
    'LinkedService.PostgreSql': PostgreSqlLinkedService,
    'LinkedService.MySql': MySqlLinkedService,
    'LinkedService.AzureMySql': AzureMySqlLinkedService,
    'LinkedService.Oracle': OracleLinkedService,
    'LinkedService.FileServer': FileServerLinkedService,
    'LinkedService.HDInsight': HDInsightLinkedService,
    'LinkedService.Dynamics': DynamicsLinkedService,
    'LinkedService.CosmosDb': CosmosDbLinkedService,
    'LinkedService.AzureKeyVault': AzureKeyVaultLinkedService,
    'LinkedService.AzureBatch': AzureBatchLinkedService,
    'LinkedService.AzureSqlDatabase': AzureSqlDatabaseLinkedService,
    'LinkedService.SqlServer': SqlServerLinkedService,
    'LinkedService.AzureSqlDW': AzureSqlDWLinkedService,
    'LinkedService.AzureTableStorage': AzureTableStorageLinkedService,
    'LinkedService.AzureBlobStorage': AzureBlobStorageLinkedService,
    'LinkedService.AzureStorage': AzureStorageLinkedService,
    'Dataset.ResponsysObject': ResponsysObjectDataset,
    'Dataset.SalesforceMarketingCloudObject': SalesforceMarketingCloudObjectDataset,
    'Dataset.VerticaTable': VerticaTableDataset,
    'Dataset.NetezzaTable': NetezzaTableDataset,
    'Dataset.ZohoObject': ZohoObjectDataset,
    'Dataset.XeroObject': XeroObjectDataset,
    'Dataset.SquareObject': SquareObjectDataset,
    'Dataset.SparkObject': SparkObjectDataset,
    'Dataset.ShopifyObject': ShopifyObjectDataset,
    'Dataset.ServiceNowObject': ServiceNowObjectDataset,
    'Dataset.QuickBooksObject': QuickBooksObjectDataset,
    'Dataset.PrestoObject': PrestoObjectDataset,
    'Dataset.PhoenixObject': PhoenixObjectDataset,
    'Dataset.PaypalObject': PaypalObjectDataset,
    'Dataset.MarketoObject': MarketoObjectDataset,
    'Dataset.MariaDBTable': MariaDBTableDataset,
    'Dataset.MagentoObject': MagentoObjectDataset,
    'Dataset.JiraObject': JiraObjectDataset,
    'Dataset.ImpalaObject': ImpalaObjectDataset,
    'Dataset.HubspotObject': HubspotObjectDataset,
    'Dataset.HiveObject': HiveObjectDataset,
    'Dataset.HBaseObject': HBaseObjectDataset,
    'Dataset.GreenplumTable': GreenplumTableDataset,
    'Dataset.GoogleBigQueryObject': GoogleBigQueryObjectDataset,
    'Dataset.EloquaObject': EloquaObjectDataset,
    'Dataset.DrillTable': DrillTableDataset,
    'Dataset.CouchbaseTable': CouchbaseTableDataset,
    'Dataset.ConcurObject': ConcurObjectDataset,
    'Dataset.AzurePostgreSqlTable': AzurePostgreSqlTableDataset,
    'Dataset.AmazonMWSObject': AmazonMWSObjectDataset,
    'DatasetCompression.ZipDeflate': DatasetZipDeflateCompression,
    'DatasetCompression.Deflate': DatasetDeflateCompression,
    'DatasetCompression.GZip': DatasetGZipCompression,
    'DatasetCompression.BZip2': DatasetBZip2Compression,
    'DatasetCompression': DatasetCompression,
    'DatasetStorageFormat.ParquetFormat': ParquetFormat,
    'DatasetStorageFormat.OrcFormat': OrcFormat,
    'DatasetStorageFormat.AvroFormat': AvroFormat,
    'DatasetStorageFormat.JsonFormat': JsonFormat,
    'DatasetStorageFormat.TextFormat': TextFormat,
    'DatasetStorageFormat': DatasetStorageFormat,
    'Dataset.HttpFile': HttpDataset,
    'Dataset.AzureSearchIndex': AzureSearchIndexDataset,
    'Dataset.WebTable': WebTableDataset,
    'Dataset.SqlServerTable': SqlServerTableDataset,
    'Dataset.SapEccResource': SapEccResourceDataset,
    'Dataset.SapCloudForCustomerResource': SapCloudForCustomerResourceDataset,
    'Dataset.SalesforceObject': SalesforceObjectDataset,
    'Dataset.RelationalTable': RelationalTableDataset,
    'Dataset.AzureMySqlTable': AzureMySqlTableDataset,
    'Dataset.OracleTable': OracleTableDataset,
    'Dataset.ODataResource': ODataResourceDataset,
    'Dataset.MongoDbCollection': MongoDbCollectionDataset,
    'Dataset.FileShare': FileShareDataset,
    'Dataset.AzureDataLakeStoreFile': AzureDataLakeStoreDataset,
    'Dataset.DynamicsEntity': DynamicsEntityDataset,
    'Dataset.DocumentDbCollection': DocumentDbCollectionDataset,
    'Dataset.CustomDataset': CustomDataset,
    'Dataset.CassandraTable': CassandraTableDataset,
    'Dataset.AzureSqlDWTable': AzureSqlDWTableDataset,
    'Dataset.AzureSqlTable': AzureSqlTableDataset,
    'Dataset.AzureTable': AzureTableDataset,
    'Dataset.AzureBlob': AzureBlobDataset,
    'Dataset.AmazonS3Object': AmazonS3Dataset,
    'Activity.DatabricksSparkPython': DatabricksSparkPythonActivity,
    'Activity.DatabricksSparkJar': DatabricksSparkJarActivity,
    'Activity.DatabricksNotebook': DatabricksNotebookActivity,
    'Activity.DataLakeAnalyticsU-SQL': DataLakeAnalyticsUSQLActivity,
    'Activity.AzureMLUpdateResource': AzureMLUpdateResourceActivity,
    'Activity.AzureMLBatchExecution': AzureMLBatchExecutionActivity,
    'Activity.GetMetadata': GetMetadataActivity,
    'Activity.WebActivity': WebActivity,
    'CopySource.AmazonRedshiftSource': AmazonRedshiftSource,
    'CopySource.ResponsysSource': ResponsysSource,
    'CopySource.SalesforceMarketingCloudSource': SalesforceMarketingCloudSource,
    'CopySource.VerticaSource': VerticaSource,
    'CopySource.NetezzaSource': NetezzaSource,
    'CopySource.ZohoSource': ZohoSource,
    'CopySource.XeroSource': XeroSource,
    'CopySource.SquareSource': SquareSource,
    'CopySource.SparkSource': SparkSource,
    'CopySource.ShopifySource': ShopifySource,
    'CopySource.ServiceNowSource': ServiceNowSource,
    'CopySource.QuickBooksSource': QuickBooksSource,
    'CopySource.PrestoSource': PrestoSource,
    'CopySource.PhoenixSource': PhoenixSource,
    'CopySource.PaypalSource': PaypalSource,
    'CopySource.MarketoSource': MarketoSource,
    'CopySource.MariaDBSource': MariaDBSource,
    'CopySource.MagentoSource': MagentoSource,
    'CopySource.JiraSource': JiraSource,
    'CopySource.ImpalaSource': ImpalaSource,
    'CopySource.HubspotSource': HubspotSource,
    'CopySource.HiveSource': HiveSource,
    'CopySource.HBaseSource': HBaseSource,
    'CopySource.GreenplumSource': GreenplumSource,
    'CopySource.GoogleBigQuerySource': GoogleBigQuerySource,
    'CopySource.EloquaSource': EloquaSource,
    'CopySource.DrillSource': DrillSource,
    'CopySource.CouchbaseSource': CouchbaseSource,
    'CopySource.ConcurSource': ConcurSource,
    'CopySource.AzurePostgreSqlSource': AzurePostgreSqlSource,
    'CopySource.AmazonMWSSource': AmazonMWSSource,
    'CopySource.HttpSource': HttpSource,
    'CopySource.AzureDataLakeStoreSource': AzureDataLakeStoreSource,
    'CopySource.MongoDbSource': MongoDbSource,
    'CopySource.CassandraSource': CassandraSource,
    'CopySource.WebSource': WebSource,
    'CopySource.OracleSource': OracleSource,
    'CopySource.AzureMySqlSource': AzureMySqlSource,
    'CopySource.HdfsSource': HdfsSource,
    'CopySource.FileSystemSource': FileSystemSource,
    'CopySource.SqlDWSource': SqlDWSource,
    'CopySource.SqlSource': SqlSource,
    'CopySource.SapEccSource': SapEccSource,
    'CopySource.SapCloudForCustomerSource': SapCloudForCustomerSource,
    'CopySource.SalesforceSource': SalesforceSource,
    'CopySource.RelationalSource': RelationalSource,
    'CopySource.DynamicsSource': DynamicsSource,
    'CopySource.DocumentDbCollectionSource': DocumentDbCollectionSource,
    'CopySource.BlobSource': BlobSource,
    'CopySource.AzureTableSource': AzureTableSource,
    'CopySource': CopySource,
    'Activity.Lookup': LookupActivity,
    'Activity.Delete': DeleteActivity,
    'Activity.SqlServerStoredProcedure': SqlServerStoredProcedureActivity,
    'Activity.Custom': CustomActivity,
    'Activity.ExecuteSSISPackage': ExecuteSSISPackageActivity,
    'Activity.HDInsightSpark': HDInsightSparkActivity,
    'Activity.HDInsightStreaming': HDInsightStreamingActivity,
    'Activity.HDInsightMapReduce': HDInsightMapReduceActivity,
    'Activity.HDInsightPig': HDInsightPigActivity,
    'Activity.HDInsightHive': HDInsightHiveActivity,
    'CopyTranslator.TabularTranslator': TabularTranslator,
    'CopyTranslator': CopyTranslator,
    'CopySink.SalesforceSink': SalesforceSink,
    'CopySink.DynamicsSink': DynamicsSink,
    'CopySink.OdbcSink': OdbcSink,
    'CopySink.AzureSearchIndexSink': AzureSearchIndexSink,
    'CopySink.AzureDataLakeStoreSink': AzureDataLakeStoreSink,
    'CopySink.OracleSink': OracleSink,
    'CopySink.SqlDWSink': SqlDWSink,
    'CopySink.SqlSink': SqlSink,
    'CopySink.DocumentDbCollectionSink': DocumentDbCollectionSink,
    'CopySink.FileSystemSink': FileSystemSink,
    'CopySink.BlobSink': BlobSink,
    'CopySink.AzureTableSink': AzureTableSink,
    'CopySink.AzureQueueSink': AzureQueueSink,
    'CopySink.SapCloudForCustomerSink': SapCloudForCustomerSink,
    'CopySink': CopySink,
    'Activity.Copy': CopyActivity,
    'Activity.Execution': ExecutionActivity,
    'Activity.AppendVariable': AppendVariableActivity,
    'Activity.SetVariable': SetVariableActivity,
    'Activity.Filter': FilterActivity,
    'Activity.Until': UntilActivity,
    'Activity.Wait': WaitActivity,
    'Activity.ForEach': ForEachActivity,
    'Activity.IfCondition': IfConditionActivity,
    'Activity.ExecutePipeline': ExecutePipelineActivity,
    'Activity.Container': ControlActivity,
    'IntegrationRuntimeStatus.SelfHosted': SelfHostedIntegrationRuntimeStatus,
    'IntegrationRuntimeStatus.Managed': ManagedIntegrationRuntimeStatus,
    'LinkedIntegrationRuntimeType.RBAC': LinkedIntegrationRuntimeRbacAuthorization,
    'LinkedIntegrationRuntimeType.Key': LinkedIntegrationRuntimeKeyAuthorization,
    'LinkedIntegrationRuntimeType': LinkedIntegrationRuntimeType,
    'IntegrationRuntime.SelfHosted': SelfHostedIntegrationRuntime,
    'IntegrationRuntime.Managed': ManagedIntegrationRuntime
};
//# sourceMappingURL=mappers.js.map