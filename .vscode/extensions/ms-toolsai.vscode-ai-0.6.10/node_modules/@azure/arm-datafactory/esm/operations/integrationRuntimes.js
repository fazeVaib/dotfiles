/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/integrationRuntimesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a IntegrationRuntimes. */
var IntegrationRuntimes = /** @class */ (function () {
    /**
     * Create a IntegrationRuntimes.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function IntegrationRuntimes(client) {
        this.client = client;
    }
    IntegrationRuntimes.prototype.listByFactory = function (resourceGroupName, factoryName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            options: options
        }, listByFactoryOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.createOrUpdate = function (resourceGroupName, factoryName, integrationRuntimeName, integrationRuntime, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            integrationRuntime: integrationRuntime,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.get = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, getOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.update = function (resourceGroupName, factoryName, integrationRuntimeName, updateIntegrationRuntimeRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            updateIntegrationRuntimeRequest: updateIntegrationRuntimeRequest,
            options: options
        }, updateOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.deleteMethod = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.getStatus = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, getStatusOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.getConnectionInfo = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, getConnectionInfoOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.regenerateAuthKey = function (resourceGroupName, factoryName, integrationRuntimeName, regenerateKeyParameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            regenerateKeyParameters: regenerateKeyParameters,
            options: options
        }, regenerateAuthKeyOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.listAuthKeys = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, listAuthKeysOperationSpec, callback);
    };
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param [options] The optional parameters
     * @returns Promise<Models.IntegrationRuntimesStartResponse>
     */
    IntegrationRuntimes.prototype.start = function (resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.beginStart(resourceGroupName, factoryName, integrationRuntimeName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    IntegrationRuntimes.prototype.stop = function (resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.beginStop(resourceGroupName, factoryName, integrationRuntimeName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    IntegrationRuntimes.prototype.syncCredentials = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, syncCredentialsOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.getMonitoringData = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, getMonitoringDataOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.upgrade = function (resourceGroupName, factoryName, integrationRuntimeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, upgradeOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.removeLinks = function (resourceGroupName, factoryName, integrationRuntimeName, linkedIntegrationRuntimeRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            linkedIntegrationRuntimeRequest: linkedIntegrationRuntimeRequest,
            options: options
        }, removeLinksOperationSpec, callback);
    };
    IntegrationRuntimes.prototype.createLinkedIntegrationRuntime = function (resourceGroupName, factoryName, integrationRuntimeName, createLinkedIntegrationRuntimeRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            createLinkedIntegrationRuntimeRequest: createLinkedIntegrationRuntimeRequest,
            options: options
        }, createLinkedIntegrationRuntimeOperationSpec, callback);
    };
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IntegrationRuntimes.prototype.beginStart = function (resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IntegrationRuntimes.prototype.beginStop = function (resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            options: options
        }, beginStopOperationSpec, options);
    };
    IntegrationRuntimes.prototype.listByFactoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByFactoryNextOperationSpec, callback);
    };
    return IntegrationRuntimes;
}());
export { IntegrationRuntimes };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByFactoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "integrationRuntime",
        mapper: tslib_1.__assign({}, Mappers.IntegrationRuntimeResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "updateIntegrationRuntimeRequest",
        mapper: tslib_1.__assign({}, Mappers.UpdateIntegrationRuntimeRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getStatusOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getConnectionInfoOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeConnectionInfo
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var regenerateAuthKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "regenerateKeyParameters",
        mapper: tslib_1.__assign({}, Mappers.IntegrationRuntimeRegenerateKeyParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAuthKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var syncCredentialsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getMonitoringDataOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeMonitoringData
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var upgradeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var removeLinksOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "linkedIntegrationRuntimeRequest",
        mapper: tslib_1.__assign({}, Mappers.LinkedIntegrationRuntimeRequest, { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createLinkedIntegrationRuntimeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "createLinkedIntegrationRuntimeRequest",
        mapper: tslib_1.__assign({}, Mappers.CreateLinkedIntegrationRuntimeRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByFactoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=integrationRuntimes.js.map