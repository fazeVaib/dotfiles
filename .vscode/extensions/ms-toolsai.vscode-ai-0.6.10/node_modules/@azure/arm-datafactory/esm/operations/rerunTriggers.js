/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/rerunTriggersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a RerunTriggers. */
var RerunTriggers = /** @class */ (function () {
    /**
     * Create a RerunTriggers.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function RerunTriggers(client) {
        this.client = client;
    }
    RerunTriggers.prototype.create = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            rerunTriggerName: rerunTriggerName,
            rerunTumblingWindowTriggerActionParameters: rerunTumblingWindowTriggerActionParameters,
            options: options
        }, createOperationSpec, callback);
    };
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    RerunTriggers.prototype.start = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.beginStart(resourceGroupName, factoryName, triggerName, rerunTriggerName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    RerunTriggers.prototype.stop = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.beginStop(resourceGroupName, factoryName, triggerName, rerunTriggerName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Cancels a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    RerunTriggers.prototype.cancel = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.beginCancel(resourceGroupName, factoryName, triggerName, rerunTriggerName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    RerunTriggers.prototype.listByTrigger = function (resourceGroupName, factoryName, triggerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            options: options
        }, listByTriggerOperationSpec, callback);
    };
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    RerunTriggers.prototype.beginStart = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            rerunTriggerName: rerunTriggerName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    RerunTriggers.prototype.beginStop = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            rerunTriggerName: rerunTriggerName,
            options: options
        }, beginStopOperationSpec, options);
    };
    /**
     * Cancels a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param rerunTriggerName The rerun trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    RerunTriggers.prototype.beginCancel = function (resourceGroupName, factoryName, triggerName, rerunTriggerName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            rerunTriggerName: rerunTriggerName,
            options: options
        }, beginCancelOperationSpec, options);
    };
    RerunTriggers.prototype.listByTriggerNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByTriggerNextOperationSpec, callback);
    };
    return RerunTriggers;
}());
export { RerunTriggers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName,
        Parameters.rerunTriggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "rerunTumblingWindowTriggerActionParameters",
        mapper: tslib_1.__assign({}, Mappers.RerunTumblingWindowTriggerActionParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TriggerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByTriggerOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RerunTriggerListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName,
        Parameters.rerunTriggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName,
        Parameters.rerunTriggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCancelOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName,
        Parameters.rerunTriggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByTriggerNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RerunTriggerListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=rerunTriggers.js.map