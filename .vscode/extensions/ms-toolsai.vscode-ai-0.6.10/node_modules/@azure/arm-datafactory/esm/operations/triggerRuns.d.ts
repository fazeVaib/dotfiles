import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { DataFactoryManagementClientContext } from "../dataFactoryManagementClientContext";
/** Class representing a TriggerRuns. */
export declare class TriggerRuns {
    private readonly client;
    /**
     * Create a TriggerRuns.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    constructor(client: DataFactoryManagementClientContext);
    /**
     * Query trigger runs.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param [options] The optional parameters
     * @returns Promise<Models.TriggerRunsQueryByFactoryResponse>
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: Models.RunFilterParameters, options?: msRest.RequestOptionsBase): Promise<Models.TriggerRunsQueryByFactoryResponse>;
    /**
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param callback The callback
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: Models.RunFilterParameters, callback: msRest.ServiceCallback<Models.TriggerRunsQueryResponse>): void;
    /**
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The optional parameters
     * @param callback The callback
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: Models.RunFilterParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerRunsQueryResponse>): void;
}
//# sourceMappingURL=triggerRuns.d.ts.map