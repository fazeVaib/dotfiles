/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/pipelinesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Pipelines. */
var Pipelines = /** @class */ (function () {
    /**
     * Create a Pipelines.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function Pipelines(client) {
        this.client = client;
    }
    Pipelines.prototype.listByFactory = function (resourceGroupName, factoryName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            options: options
        }, listByFactoryOperationSpec, callback);
    };
    Pipelines.prototype.createOrUpdate = function (resourceGroupName, factoryName, pipelineName, pipelineParameter, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            pipelineName: pipelineName,
            pipelineParameter: pipelineParameter,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Pipelines.prototype.get = function (resourceGroupName, factoryName, pipelineName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            pipelineName: pipelineName,
            options: options
        }, getOperationSpec, callback);
    };
    Pipelines.prototype.deleteMethod = function (resourceGroupName, factoryName, pipelineName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            pipelineName: pipelineName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Pipelines.prototype.createRun = function (resourceGroupName, factoryName, pipelineName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            pipelineName: pipelineName,
            options: options
        }, createRunOperationSpec, callback);
    };
    Pipelines.prototype.listByFactoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByFactoryNextOperationSpec, callback);
    };
    return Pipelines;
}());
export { Pipelines };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByFactoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PipelineListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.pipelineName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "pipelineParameter",
        mapper: tslib_1.__assign({}, Mappers.PipelineResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PipelineResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.pipelineName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PipelineResource
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.pipelineName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createRunOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.pipelineName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.referencePipelineRunId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: {
            serializedName: "parameters",
            type: {
                name: "Dictionary",
                value: {
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.CreateRunResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByFactoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PipelineListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=pipelines.js.map