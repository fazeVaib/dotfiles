/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/linkedServicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LinkedServices. */
var LinkedServices = /** @class */ (function () {
    /**
     * Create a LinkedServices.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function LinkedServices(client) {
        this.client = client;
    }
    LinkedServices.prototype.listByFactory = function (resourceGroupName, factoryName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            options: options
        }, listByFactoryOperationSpec, callback);
    };
    LinkedServices.prototype.createOrUpdate = function (resourceGroupName, factoryName, linkedServiceName, linkedService, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            linkedServiceName: linkedServiceName,
            linkedService: linkedService,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    LinkedServices.prototype.get = function (resourceGroupName, factoryName, linkedServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            linkedServiceName: linkedServiceName,
            options: options
        }, getOperationSpec, callback);
    };
    LinkedServices.prototype.deleteMethod = function (resourceGroupName, factoryName, linkedServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            linkedServiceName: linkedServiceName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    LinkedServices.prototype.listByFactoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByFactoryNextOperationSpec, callback);
    };
    return LinkedServices;
}());
export { LinkedServices };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByFactoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LinkedServiceListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.linkedServiceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "linkedService",
        mapper: tslib_1.__assign({}, Mappers.LinkedServiceResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LinkedServiceResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.linkedServiceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LinkedServiceResource
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.linkedServiceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByFactoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LinkedServiceListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=linkedServices.js.map