/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/triggersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Triggers. */
var Triggers = /** @class */ (function () {
    /**
     * Create a Triggers.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function Triggers(client) {
        this.client = client;
    }
    Triggers.prototype.listByFactory = function (resourceGroupName, factoryName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            options: options
        }, listByFactoryOperationSpec, callback);
    };
    Triggers.prototype.createOrUpdate = function (resourceGroupName, factoryName, triggerName, trigger, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            trigger: trigger,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Triggers.prototype.get = function (resourceGroupName, factoryName, triggerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            options: options
        }, getOperationSpec, callback);
    };
    Triggers.prototype.deleteMethod = function (resourceGroupName, factoryName, triggerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Triggers.prototype.start = function (resourceGroupName, factoryName, triggerName, options) {
        return this.beginStart(resourceGroupName, factoryName, triggerName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Triggers.prototype.stop = function (resourceGroupName, factoryName, triggerName, options) {
        return this.beginStop(resourceGroupName, factoryName, triggerName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Triggers.prototype.beginStart = function (resourceGroupName, factoryName, triggerName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Triggers.prototype.beginStop = function (resourceGroupName, factoryName, triggerName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            triggerName: triggerName,
            options: options
        }, beginStopOperationSpec, options);
    };
    Triggers.prototype.listByFactoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByFactoryNextOperationSpec, callback);
    };
    return Triggers;
}());
export { Triggers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByFactoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggerListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "trigger",
        mapper: tslib_1.__assign({}, Mappers.TriggerResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TriggerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggerResource
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/stop",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.triggerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByFactoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggerListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=triggers.js.map