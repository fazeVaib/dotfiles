/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/integrationRuntimeNodesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a IntegrationRuntimeNodes. */
var IntegrationRuntimeNodes = /** @class */ (function () {
    /**
     * Create a IntegrationRuntimeNodes.
     * @param {DataFactoryManagementClientContext} client Reference to the service client.
     */
    function IntegrationRuntimeNodes(client) {
        this.client = client;
    }
    IntegrationRuntimeNodes.prototype.get = function (resourceGroupName, factoryName, integrationRuntimeName, nodeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            nodeName: nodeName,
            options: options
        }, getOperationSpec, callback);
    };
    IntegrationRuntimeNodes.prototype.deleteMethod = function (resourceGroupName, factoryName, integrationRuntimeName, nodeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            nodeName: nodeName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    IntegrationRuntimeNodes.prototype.update = function (resourceGroupName, factoryName, integrationRuntimeName, nodeName, updateIntegrationRuntimeNodeRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            nodeName: nodeName,
            updateIntegrationRuntimeNodeRequest: updateIntegrationRuntimeNodeRequest,
            options: options
        }, updateOperationSpec, callback);
    };
    IntegrationRuntimeNodes.prototype.getIpAddress = function (resourceGroupName, factoryName, integrationRuntimeName, nodeName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            factoryName: factoryName,
            integrationRuntimeName: integrationRuntimeName,
            nodeName: nodeName,
            options: options
        }, getIpAddressOperationSpec, callback);
    };
    return IntegrationRuntimeNodes;
}());
export { IntegrationRuntimeNodes };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "updateIntegrationRuntimeNodeRequest",
        mapper: tslib_1.__assign({}, Mappers.UpdateIntegrationRuntimeNodeRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getIpAddressOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeNodeIpAddress
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=integrationRuntimeNodes.js.map